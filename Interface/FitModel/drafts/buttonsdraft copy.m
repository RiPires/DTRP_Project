clc;clear;
fig = figure();


%--------------------------------------------------------------------------
% "MODEL OPTIONS" PANNEL
%--------------------------------------------------------------------------
panel_ModelOpt = uipanel('Parent', fig, ...
    'Tag',              'panel_ModelOpt', ...
    'Title',            'Model Options', ...
    'Units',            'normalized', ...
    'Position',         [.01 .315 .38 .3],...
    'HighlightColor',   "#D95319",...
    'ForegroundColor',  'k',...
    'FontSize',         12);

%--------------------------------------------------------------------------
% BUTTON FOR THE PLOTS THE USER WANTS TO SEE (MAXIMUM OF 2)
%--------------------------------------------------------------------------
handles.pushbutton_Plots = uicontrol(panel_ModelOpt,...
    'Tag',              'pushbutton_Plots',...
    'Style',            'pushbutton', ...
    'String',           'Select Plot(s)',...
    'Units',            'Normalized',...
    'FontSize',         12,...
    'Position',         [.6 .02 .30 .22],...
    'Enable',           'on',...
    'ForegroundColor',  "k",...
    'BackgroundColor',  '#D95319',...
    'Tooltipstring',    'Select Plot(s) you want to visualize on the right panel',...
    'Callback',         @(btn, event)pushbutton_Plots_Callback); 


% when the button is clicked it opens a new window for the user 
% to select plot(s)

% This function creates a new UI figure for the selection window
% where the user selects the plots he wants to see (1 or 2)
% and the tau values needed if he wants to plot the BED or EQD2
% output: 
    % valSel - bool to store if the usel selection is valid or not
    % listFits - list with the selected fit(s)
    % listPlots - list with the selected plot(s)
    % tauValues - list with lists of tau values
function [valSel,listFits,listPlots,tauValues] = pushbutton_Plots_Callback
    global valSel;
    valSel = false; % we start by assuming the user's choice is not valid
    
    listFits = [0,0]; % each entry on the list represents a fit
    % the order is the following: [FIT1, FIT2]

    listPlots = [0,0,0,0,0,0]; % each entry on the list represents a plot
    % the order is the following: [BED1, EQD21, FIT1, BED2, EQD22, FIT2]

    global tauValues;
    tauValues = {0,0,0,0}; % each entry on the list represents a list of 
    % tau values for a plot 
    % the order is the following: [BED1, EQD21, BED2, EQD22]

    % opens a new figure
    selectionFig = uifigure('Name', 'Plot Selection', 'Position', [500, 500, 500, 500]);

    handles.SelectPlot = uibuttongroup('Parent', selectionFig, ...
        'Tag', 'buttongroup', ...
        'FontSize', 10, ...
        'FontWeight', 'bold', ...
        'Units', 'normalized', ...
        'Position', [0 0 1.0 1.0]);
    
    %%%%%%%%%%%%%%%%%% FIT 1 %%%%%%%%%%%%%%%%%%%%
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    % Panel for the Fit1 Secondary Buttons
    secondaryPanelFit1 = uipanel('Parent', selectionFig, ...
        'Title', '', ...
        'Tag', 'secondary_buttons_fit1', ...
        'FontSize', 10, ...
        'BorderType',  "none",...
        'FontWeight', 'bold', ...
        'Units', 'normalized', ...
        'Position', [.15 .30 .35 .2], ...
        'Visible', 'off');

    % Secondary Buttons Fit 1
    handles.SecondaryButtons_Fit1 = uibuttongroup('Parent', handles.SelectPlot, ...
        'Title', '', ...
        'Tag', 'secondary_buttons_fit1', ...
        'FontSize', 10, ...
        'FontWeight', 'bold', ...
        'Units', 'normalized', ...
        'Position', [0.56 .30 .35 .2], ...
        'SelectionChangedFcn', @(src, event) SecondaryButtonFit1_Callback(src, event, handles), ...
        'Visible', 'off');
   
    % Fit1 Secondary Buttons
    % Fit1
    handles.SecondarySelect_Fit1 = uicontrol('Parent', secondaryPanelFit1, ...
        'Tag', 'SecondarySelect_Fit1', ...
        'Style', 'checkbox', ...
        'String', 'Fit1', ...
        'Units', 'Normalized', ...
        'Position', [.05 .6 .9 .2], ...
        'FontSize', 8, ...
        'HorizontalAlignment', 'center');

    % BED
    handles.SecondarySelect_BED1 = uicontrol('Parent', secondaryPanelFit1, ...
        'Tag', 'SecondarySelect_BED1', ...
        'Style', 'checkbox', ...
        'String', 'BED', ...
        'Units', 'Normalized', ...
        'Position', [.05 .3 .9 .3], ...
        'FontSize', 8, ...
        'HorizontalAlignment', 'center');

    % Panel for the tau values for BED
    BEDPanelFit1 = uipanel('Parent', secondaryPanelFit1, ...
        'Title', '', ...
        'Tag', 'tau_BED_fit1', ...
        'FontSize', 8, ...
        'BorderType',  "none",...
        'FontWeight', 'bold', ...
        'Units', 'normalized', ...
        'Position', [.35 .3 .63 .27], ... 
        'Visible', 'off');

   % Button to select the tau values
   handles.tauBEDFit1 = uicontrol('Parent', BEDPanelFit1, ...
        'Style', 'pushbutton', ...
        'String', 'Select ùúè value(s)',...
        'Units', 'Normalized', ...
        'Position', [0.05 0.05 .95 .91], ...
        'FontSize', 8, ...
        'ForegroundColor',  "k",...
        'BackgroundColor',  '#FFFFFF', ...
        'Tooltipstring',    'Select ùúè value(s) in months separated by commas',...
        'Callback', @(src, event)askTau(src, event,1));

    % Callback for BED from Fit1
    set(handles.SecondarySelect_BED1, 'Callback', @(src, event) BEDFit1Callback(src, event, BEDPanelFit1));
    
    % EQD2
    handles.SecondarySelect_EQD21 = uicontrol('Parent', secondaryPanelFit1, ...
        'Tag', 'SecondarySelect_EQD21', ...
        'Style', 'checkbox', ...
        'String', 'EQD2', ...
        'Units', 'Normalized', ...
        'Position', [.05 0 .9 .3], ...
        'FontSize', 8, ...
        'HorizontalAlignment', 'center');

    % Panel for the tau values for EQD2
    EQD2PanelFit1 = uipanel('Parent', secondaryPanelFit1, ...
        'Title', '', ...
        'Tag', 'tau_EQD2_fit1', ...
        'FontSize', 8, ...
        'BorderType',  "none",...
        'FontWeight', 'bold', ...
        'Units', 'normalized', ...
        'Position', [.35 0 .63 .27], ...  
        'Visible', 'off');

    % Button to select the tau values
   handles.tauEQD2Fit1 = uicontrol('Parent', EQD2PanelFit1, ...
        'Style', 'pushbutton', ...
        'String', 'Select ùúè value(s)',...
        'Units', 'Normalized', ...
        'Position', [0.05 0.05 .95 .91], ...
        'FontSize', 8, ...
        'ForegroundColor',  "k",...
        'BackgroundColor',  '#FFFFFF',...
        'Tooltipstring',    'Select ùúè value(s) in months separated by commas',...
        'Callback', @(src, event)askTau(src, event,2));

    % Callback for EQD2 from Fit1
    set(handles.SecondarySelect_EQD21, 'Callback', @(src, event) EQD2Fit1Callback(src, event, EQD2PanelFit1));
   

    % Fit 1 Button
    fit1Checkbox = uicontrol('Parent', selectionFig, ...
        'Style', 'checkbox', ...
        'String', 'Fit1:', ...
        'Units', 'Normalized', ...
        'Position', [.3 .5 .25 .1], ...
        'FontSize', 10, ...
        'HorizontalAlignment', 'center', ...
        'TooltipString', ['<html><center>Select Model 1:<br />' ...
        'SR(d,D,&tau) = exp(-K exp(-[&alpha(1+d/(&alpha/&beta)) D - &gamma T - a(&tau - T))<sup>&delta</sup>]))<br />' ...
        ' </center> <br />' ...
        'SR: Survival Rate in percentage (%) <br />' ...
        '&tau: elapsed time from the beginning of the treatment (months) <br />' ...
        '&gamma = ln2/T<sub>d</sub>, &alpha and &beta characterize the intrinsic radiosensitivity of cells <br />' ...
        'T<sub>d</sub>: potential doubling time <br />' ...
        'K, a and &delta are the remaining fitting parameters. </html>']);

    % Callback for Fit1
    set(fit1Checkbox, 'Callback', @(src, event) Fit1Callback(src, event, secondaryPanelFit1));
    
    %%%%%%%%%%%%%%%%%% FIT 2 %%%%%%%%%%%%%%%%%%%%
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

     % Panel for the Fit2 Secondary Buttons
    secondaryPanelFit2 = uipanel('Parent', selectionFig, ...
        'Title', '', ...
        'Tag', 'secondary_buttons_fit2', ...
        'FontSize', 10, ...
        'BorderType',  "none",...
        'FontWeight', 'bold', ...
        'Units', 'normalized', ...
        'Position', [.55 .30 .35 .2], ...
        'Visible', 'off');


    % Secondary Buttons Fit 2
    handles.SecondaryButtons_Fit2 = uibuttongroup('Parent', handles.SelectPlot, ...
        'Title', '', ...
        'Tag', 'secondary_buttons_fit2', ...
        'FontSize', 10, ...
        'FontWeight', 'bold', ...
        'Units', 'normalized', ...
        'Position', [0.56 .30 .35 .2], ...
        'SelectionChangedFcn', @(src, event) SecondaryButtonFit2_Callback(src, event, handles), ...
        'Visible', 'off');

    % Fit2 Secondary Buttons
    % Fit2
    handles.SecondarySelect_Fit2 = uicontrol('Parent', secondaryPanelFit2, ...
        'Tag', 'SecondarySelect_Fit2', ...
        'Style', 'checkbox', ...
        'String', 'Fit2', ...
        'Units', 'Normalized', ...
        'Position', [.05 .6 .9 .3], ...
        'FontSize', 8, ...
        'HorizontalAlignment', 'center');

    % BED
    handles.SecondarySelect_BED2 = uicontrol('Parent', secondaryPanelFit2, ...
        'Tag', 'SecondarySelect_BED2', ...
        'Style', 'checkbox', ...
        'String', 'BED', ...
        'Units', 'Normalized', ...
        'Position', [.05 .3 .9 .3], ...
        'FontSize', 8, ...
        'HorizontalAlignment', 'center');

    % Panel for the tau values for BED
    BEDPanelFit2 = uipanel('Parent', secondaryPanelFit2, ...
        'Title', '', ...
        'Tag', 'tau_BED_fit2', ...
        'FontSize', 8, ...
        'BorderType',  "none",...
        'FontWeight', 'bold', ...
        'Units', 'normalized', ...
        'Position', [.35 .3 .63 .27], ...
        'Visible', 'off');

    % Button to select the tau values
   handles.tauBEDFit2 = uicontrol('Parent', BEDPanelFit2, ...
        'Style', 'pushbutton', ...
        'String', 'Select ùúè value(s)',...
        'Units', 'Normalized', ...
        'Position', [0.05 0.05 .95 .91], ...
        'FontSize', 8, ...
        'ForegroundColor',  "k",...
        'BackgroundColor',  '#FFFFFF',...
        'Tooltipstring',    'Select ùúè value(s) in months separated by commas',...
        'Callback', @(src, event)askTau(src, event,3));

    % Callback for BED from Fit2
    set(handles.SecondarySelect_BED2, 'Callback', @(src, event) BEDFit2Callback(src, event, BEDPanelFit2));
    

    % EQD2
    handles.SecondarySelect_EQD22 = uicontrol('Parent', secondaryPanelFit2, ...
        'Tag', 'SecondarySelect_EQD22', ...
        'Style', 'checkbox', ...
        'String', 'EQD2', ...
        'Units', 'Normalized', ...
        'Position', [.05 0 .9 .3], ...
        'FontSize', 8, ...
        'HorizontalAlignment', 'center');

    % Panel for the tau values for EQD2
    EQD2PanelFit2 = uipanel('Parent', secondaryPanelFit2, ...
        'Title', '', ...
        'Tag', 'tau_EQD2_fit2', ...
        'FontSize', 8, ...
        'BorderType',  "none",...
        'FontWeight', 'bold', ...
        'Units', 'normalized', ...
        'Position', [.35 0 .63 .27], ...
        'Visible', 'off');

   % Button to select the tau values
   handles.tauEQD2Fit2 = uicontrol('Parent', EQD2PanelFit2, ...
        'Style', 'pushbutton', ...
        'String', 'Select ùúè value(s)',...
        'Units', 'Normalized', ...
        'Position', [0.05 0.05 .95 .91], ...
        'FontSize', 8, ...
        'ForegroundColor',  "k",...
        'BackgroundColor',  '#FFFFFF',...
        'Tooltipstring',    'Select ùúè value(s) in months separated by commas',...
        'Callback', @(src, event)askTau(src, event,4));

    % Callback for BED from Fit2
    set(handles.SecondarySelect_EQD22, 'Callback', @(src, event) EQD2Fit2Callback(src, event, EQD2PanelFit2));
    
     % Fit 2 Button
    fit2Checkbox = uicontrol('Parent', selectionFig, ...
        'Style', 'checkbox', ...
        'String', 'Fit2:', ...
        'Units', 'Normalized', ...
        'Position', [.70 .5 .25 .1], ...
        'FontSize', 10, ...
        'HorizontalAlignment', 'center', ...
        'TooltipString', ['<html><center>Select Model 2:<br /> ' ...
        'SR(d,D,&tau) = 1 - (2&pi)<sup>-1/2</sup> &int<sub>-&infin</sub><sup>t</sup> exp(-x<sup>2</sup>/2) dx <br /> ' ...
        't = (exp(-[&alpha(1+d/(&alpha/&beta))D - &gamma T -(&gamma(&tau - T))<sup>&delta</sup>])-K<sub>50</sub>/K<sub>0</sub>)/(&sigma<sub>k</sub>/K<sub>0</sub>) <br /> ' ...
        '</center> <br />' ...
        'SR: Survival Rate in percentage (%) <br /> ' ...
        '&tau: elapsed time from the beginning of the treatment (months) <br /> ' ...
        't = (K - K<sub>50</sub>)/&sigma<sub>k</sub> <br />' ...
        'K<sub>50</sub> is the critical number of tumour clonogens corresponding to death in 50 % patients <br />' ...
        '&sigma<sub>k</sub> is the gaussian width for the distribution of critical clonogen numbers <br />' ...
        'Dependence of tumor cells on D, d, T and &tau is given by the following LQ inspired model: <br />' ...
        'K = K<sub>50</sub> exp(-[&alpha(1+d/(&alpha/&beta))D - &gamma T -(&gamma(&tau - T))<sup>&delta</sup>]) <br />' ...
        '(&gamma(&tau - T))<sup>&delta</sup> characterizes the time dependence of tumor regrowth after completion of RT. </html>']);

    
    % Callback for Fit2
    set(fit2Checkbox, 'Callback', @(src, event) Fit2Callback(src, event, secondaryPanelFit2));
    
    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

    % Select Plot(s) button
    selectPlotsButton = uicontrol('Parent', selectionFig, ...
        'Style', 'pushbutton', ...
        'String', 'Select Plot(s)', ...
        'Units', 'Normalized', ...
        'Position', [.4 .1 .2 .1], ...
        'FontSize', 10, ...
        'ForegroundColor',  "k",...
        'BackgroundColor',  '#D95319',...
        'Callback', @(src, event) SelectPlotsCallback(src, handles));

    % Callback for "Select Plot(s)" button
    % Function to see if the number of selected plot(s) is valid
    % and if the user selected tau values if needed and to store this
    % information
    % output: 
        % valSel - bool to store if the usel selection is valid or not
        % listFits - list with the selected fit(s)
        % listPlots - list with the selected plot(s)
        % tauValues - list with lists of tau values

    %function [valSel,listFits,listPlots] = SelectPlotsCallback(~, handles,valSel)
    function [listFits,listPlots] = SelectPlotsCallback(~, handles)

        numSel = false; % variable to store if the number of plot(s) 
        % selected by the user is valid or not

        % Count the number of selected secondary buttons for Fit1
        numSelectedFit1 = sum([
            handles.SecondarySelect_Fit1.Value
            handles.SecondarySelect_BED1.Value
            handles.SecondarySelect_EQD21.Value
        ]);
    
        % Count the number of selected secondary buttons for Fit2
        numSelectedFit2 = sum([
            handles.SecondarySelect_Fit2.Value
            handles.SecondarySelect_BED2.Value
            handles.SecondarySelect_EQD22.Value
        ]);
    
        % Check the number of selected buttons and display a message
        if numSelectedFit1 == 0 && numSelectedFit2 == 0
            msg = 'Please select 1 or 2 plot(s).';
        elseif numSelectedFit1 + numSelectedFit2 > 2
            msg = 'You can select up to 2 plots.';
        elseif numSelectedFit1 == 1 || numSelectedFit1 == 2 
            listFits(1) = 1;
            numSel = true; % the user's choice is valid
        elseif numSelectedFit2 == 1 || numSelectedFit2 == 2 
            listFits(2) = 1;
            numSel = true; % the user's choice is valid
        end

        % See if the user selected tau values in case he selected BED
        % and/or EQD2 plot(s)

        if numSel == true 
            if handles.SecondarySelect_BED1.Value == 1
                if tauValues{1} == 0
                    msg = 'Please select tau values for the BED Fit1 Plot.';
                else
                    valSel = true;
                end
            elseif handles.SecondarySelect_EQD21.Value == 1
                if tauValues{2} == 0
                    msg = 'Please select tau values for the EQD2 Fit1 Plot.';
                else
                    valSel = true;
                end
            elseif handles.SecondarySelect_BED2.Value == 1
                if tauValues{3} == 0
                    msg = 'Please select tau values for the BED Fit2 Plot.';
                else
                    valSel = true;
                end
            elseif handles.SecondarySelect_EQD22.Value == 1
                if tauValues{4} == 0
                    msg = 'Please select tau values for the EQD2 Fit2 Plot.';
                else
                    valSel = true;
                end
            end
        end


        % Save selected plot(s) in a list
        if valSel == true
            msg = 'Valid Selection';

            if handles.SecondarySelect_BED1.Value == 1
                listPlots(1) = 1;
    
            elseif handles.SecondarySelect_EQD21.Value == 1
                listPlots(2) = 1;
      
            elseif handles.SecondarySelect_Fit1.Value == 1
                listPlots(3) = 1;
            
            elseif handles.SecondarySelect_BED2.Value == 1
                listPlots(4) = 1;
    
            elseif handles.SecondarySelect_EQD22.Value == 1
                listPlots(5) = 1;
      
            elseif handles.SecondarySelect_Fit2.Value == 1
                listPlots(6) = 1;
            
            end

        end

        
        % Display the message to the user
        msgbox(msg, 'Plot Selection');
end


    function SecondaryButtonFit1_Callback(hObject, ~)
        tmp = get(hObject, 'SelectedObject');
        if strcmp(tmp.String, 'Fit1')
            disp('Fit1');
        elseif strcmp(tmp.String, 'BED1')
            disp('BED1');
        elseif strcmp(tmp.String, 'EQD21')
            disp('EQD21');
        end
    end

    function SecondaryButtonFit2_Callback(hObject, ~)
        tmp = get(hObject, 'SelectedObject');
        if strcmp(tmp.String, 'Fit2')
            disp('Fit2');
        elseif strcmp(tmp.String, 'BED2')
            disp('BED2');
        elseif strcmp(tmp.String, 'EQD22')
            disp('EQD22');
        end
    end


    % Function to handle Fit1
    function Fit1Callback(~, event, secondaryPanelFit1)
        checkboxValue = event.Source.Value;
        if checkboxValue == 1 % Check if the checkbox is activated
            set(secondaryPanelFit1, 'Visible', 'on');
        else
            set(secondaryPanelFit1, 'Visible', 'off');
        end
    end


    % Function to handle Fit2
    function Fit2Callback(~, event, secondaryPanelFit2)
        checkboxValue = event.Source.Value;
        if checkboxValue == 1 % Check if the checkbox is activated
            set(secondaryPanelFit2, 'Visible', 'on');
        else
            set(secondaryPanelFit2, 'Visible', 'off');
        end
    end

    % Function to handle BED from Fit1
    function BEDFit1Callback(~, event, BEDPanelFit1)
        checkboxValue = event.Source.Value;
        if checkboxValue == 1 % Check if the checkbox is activated
            set(BEDPanelFit1, 'Visible', 'on');
        else
            set(BEDPanelFit1, 'Visible', 'off');
        end
    end

    % Function to handle EQD2 from Fit1
    function EQD2Fit1Callback(~, event, EQD2PanelFit1)
        checkboxValue = event.Source.Value;
        if checkboxValue == 1 % Check if the checkbox is activated
            set(EQD2PanelFit1, 'Visible', 'on');
        else
            set(EQD2PanelFit1, 'Visible', 'off');
        end
    end

    % Function to handle BED from Fit2
    function BEDFit2Callback(~, event, BEDPanelFit2)
        checkboxValue = event.Source.Value;
        if checkboxValue == 1 % Check if the checkbox is activated
            set(BEDPanelFit2, 'Visible', 'on');
        else
            set(BEDPanelFit2, 'Visible', 'off');
        end
    end

    % Function to handle EQD2 from Fit2
    function EQD2Fit2Callback(~, event, EQD2PanelFit2)
        checkboxValue = event.Source.Value;
        if checkboxValue == 1 % Check if the checkbox is activated
            set(EQD2PanelFit2, 'Visible', 'on');
        else
            set(EQD2PanelFit2, 'Visible', 'off');
        end
    end

    % Function to open a box where the user can put the tau values
    % It returns a list, where the 1st element is a bool indicating if the
    % input is valid (true) or not (false), and the 2nd element is the input
    % given by the user
    % input:
        % n - index of the list of lists of tau values where to place
        % the values choosen by the user
        % order: [BED1,EQD21,BED2,EQD22]
    % output:
        % tauValid - bool to store if the user made a valid choice or not
        % tauValues - list with lists of tau values

    %function [tauValid,tauValues] = askTau(~,~,n,tauValues)
    function [tauValid] = askTau(~,~,n)

        tauValid = false; % we start by assuming the user's choice is not valid

        prompt = 'Enter positive integers separated by commas:';
        dlgTitle = 'Tau values';
        numLines = 1;
        defaultAnswer = {''}; % Initial empty string
        input = inputdlg(prompt, dlgTitle, numLines, defaultAnswer);
    
        if isempty(input)
            % User canceled the input dialog
            return;
        end
    
        % Convert the input cell array to a string
        inputStr = input{1};
    
        % Split the input string into an array of strings using commas as the delimiter
        valuesStr = strsplit(inputStr, ',');
    
        % Convert the strings to numbers and validate
        taus = str2double(valuesStr);
    
        if all(~isnan(taus)) && all(taus > 0) && all(floor(taus) == taus)
            % All values are positive integers
            % Process the values as needed
            tauValid = true;
        else
            % Invalid input
            errordlg('Invalid input. Please enter positive integers separated by commas.', 'Error');
            tauValid = false;
        end

        if tauValid == true

            tauValues{n} = taus; 
           
        end

        disp('tau values asktau:');
        disp(tauValues);

    end
    % 
    % 
    % if isValid == true
    %     % Store tauValues in the appropriate cell of handles.tauValues
    %     handles.tauValues{buttonIndex} = tauValues;
    %     guidata(handles.figure, handles); % Update the handles structure
    % end
end



