function main
% function main
% HELP: this function launches the RADIANCE: Radiotherapy Survival Rate Modeling Interface,
%       a GUI (Graphical User Interface) to perform
%       survival rate (SR) modeling by fitting different survival models to
%       clinical data inputed by the user
%      
%
% INPUT
%   The function main requires NO INPUT to launch the interface!
%  
%  While runing and interacting with the interface, the user may prompt
% different kinds of inputs, such as: adding new files via the uigetfile
% class, edit contents of uitable objects, type output files' names, etc.
%
% OUTPUT
%  The function main returns NO OUTPUT when launching the interface!
%
%  While runing and interacting with the interface, the user may prompt
% different kinds of outputs, such as: result of fited parameters and
% uncertainties; clinical data, fiting SR over time and over BED plots
% 
%
%
% SEE ALSO: uimenu, uitoolbar, uipushtool, uipanel, uicontrol, uigetfile,
%           uibuttongroup, 
%
% -------------------------------------------------------------------------
% Authors:
% R. Pires
% A. Pardal
% R. Santos
% 
% Last Update: 20/06/2023
% 
% adapted from bcf's teraPro function made in 09-01-2023
% -------------------------------------------------------------------------


%--------------------------------------------------------------------------
% Initialize some variables for demonstration purposes
%--------------------------------------------------------------------------
data = {};
TestData = {true 'Data1.m' 'data1' 128 53.6 4.88 28;...
            true 'Data2.m' 'data2' 35 61.5 1.5 42;...
            true 'Data3.m' 'data3' 83 55 1.8 37;...
            true 'Data4.m' 'data4' 51 45 1.8 37;...
            true 'Data5.m' 'data5' 24 32.5 1.8 37};

ModelOptions1 = {0.042 0.037 0.002587 0.00608 1268 0.16;... % initial guess
                 0 0 0 0 1000 0;...                         % lower limit     
                 0.05 0.05 0.003 0.007 1500 0.30};          % upper limit

ModelOptions2 = {2.03 0.010 0.000666 0.00542 0.65 0.20;...
                 1.99 0.009 0.000647 0.00495 0.59 0.19;...
                 2.07 0.011 0.000692 0.00598 0.71 0.21};
FitData = {};
handles.FileNames = {'Data1' 'Data2' 'Data3' 'Data4' 'Data5'};
%FitInput = {};
%----------                                                     ----------%

%--------------------------------------------------------------------------
% MAIN FIGURE
%--------------------------------------------------------------------------
mainFig =figure(1);
set(mainFig ,'Name','RADIANCE: Radiotherapy Survival Rate Modeling Interface',...
    'NumberTitle','off',...
    'WindowState', 'maximized',...        % Maximize window by default
    'KeyPressFcn',@figure_keyPressFcn,... % What happens when certain keys are pressed on the keyboard
    'MenuBar','None');
clf,                                      % clear the figure

    function figure_keyPressFcn(hObject,eventdata)
               %%%   !!!   TO DO   !!!   %%% 
        switch eventdata.Key
            case 'return'
                pushbutton_Fit_Callback() 
            case 'backspace'
                set(hObject,'Color','b')
            case 'escape'
                pushbutton_ClearFitAxes_Callback()       
        end
    end
%----------                                                     ----------%

%--------------------------------------------------------------------------
% CIENCIAS LOGO
%--------------------------------------------------------------------------
[tmp,~,alfa] = imread('ciencias_ul_azul_h_s-ass.png');

handles.axes_logo = axes('Parent',mainFig,...
                         'Units','Normalized', ...
                         'Position',[0.01 0.93 0.07 0.07],...
                         'Visible','off');
tmp=image(tmp);
set(tmp, 'AlphaData', alfa);
axis equal off
%----------                                                     ----------%


%--------------------------------------------------------------------------
% MENU
%--------------------------------------------------------------------------
%%%   !!!   TO DO   !!!   %%% 

%-----------
% FILE
%-----------
handles.uimenu_file = uimenu(mainFig, ...   % Menu "File"
        	                'Label','File');

    handles.uimenu_newFile = uimenu(handles.uimenu_file,...
                                   'Label','New File...',...
                                   'Callback',@uimenu_new_callback);
    
    handles.uimenu_saveFile = uimenu(handles.uimenu_file,...
                                    'Label','Save...',...
                                    'Separator','on',...
                                    'Callback',@uimenu_save_callback);
    
        function uimenu_new_callback(~,~)
            
            warndlg(['No action will happen when Pressing OK because'...
                ' this Callback function is not programmed yet!'],...
                '!! Warning !!')
            % See Also: dialog, questdlg, errordlg
        end
    
        function uimenu_save_callback(~,~)        
            % Can be any variable stored in the interface or the workspace
            uisave({'data'},'ListStudents.mat') %Suggested filename
            %See Also: uigetfifle, uiopen
        end

%-----------
% FIT
%-----------
handles.uimenu_fit = uimenu(mainFig, ...
        	                'Label','Fit');

    handles.uimenu_model = uimenu(handles.uimenu_fit,...
                                   'Label', 'Select Model');

        handles.uimenu_fit1 = uimenu(handles.uimenu_model,...
                                   'Label','Fit1',...
                                   'Callback', @uimenu_fit1_callback);

            function uimenu_fit1_callback(~,~)
                handles.radiobutton_Fit1.Value = 1;
            end

        handles.uimenu_fit2 = uimenu(handles.uimenu_model,...
                           'Label','Fit2',...
                           'Callback', @uimenu_fit2_callback);

            function uimenu_fit2_callback(~,~)
                handles.radiobutton_Fit2.Value = 1;
            end

    handles.uimenu_dofit = uimenu(handles.uimenu_fit,...
                               'Label','Perform Fit',...
                               'Callback', @pushbutton_Fit_Callback);
%-----------
% PLOT
%-----------
handles.uimenu_plot = uimenu(mainFig, ...
        	                'Label','Plot');
    handles.uimenu_clr = uimenu(handles.uimenu_plot,...
                                'Label', 'Clear axes',...
                                'Callback', @pushbutton_ClearFitAxes_Callback);
    
    handles.uimenu_pltdata = uimenu(handles.uimenu_plot,...
                            'Label', 'Plot selected clinical data',...
                            'Callback', @PlotData);
%-----------
% HELP
%-----------
handles.uimenu_hp = uimenu(mainFig, ...
        	                'Label','Help');

%-----------
% ABOUT
%-----------
handles.uimenu_abt = uimenu(mainFig, ...
        	                'Label','About',...
                            'Callback', @menu_abt_Callback);

    function menu_abt_Callback(~,~)
        system(['notepad' ' ../../README.md' ' &']); % works on windows
    end
%----------                                                     ----------%

%--------------------------------------------------------------------------
% TOOLBAR
%--------------------------------------------------------------------------
%%%   !!!   TO DO   !!!   %%% 
handles.toolbar=uitoolbar(mainFig);

%-------------------
% "Add File" Button
%-------------------
myimage = imread('./AddFileIcon.png');
myIcon = imresize(myimage, [20, 20]);
uipushtool(handles.toolbar, ...
    'TooltipString',    'Add File',...
    'CData',             myIcon,...
    'Tag',              'pushtool_addfile',...
    'Enable',           'on',...
    'ClickedCallback',  @pushbutton_add_Callback)

    function pushbutton_add_Callback(~,~)       
        data = get(handles.uitable,'Userdata');             % Get data from the Data Details table
        FileList = get(handles.uitable,'RowName');          % The names of the files are stored in the RowName
        n=numel(FileList); 
        files = uigetfile('*', ...                          % GUI that allows to select multiple files
                           'Select one or more files', ...
                           'MultiSelect','on');             
        if ischar(files)                                    % If only one file is selected, "files" is a char vector
            FileNames = strsplit(files, '.');               % gets file name without extension
            FileNames = string(FileNames{1});                 
        else                                                % If multiple files are selected
            FileNames = [];
            for k = 1:numel(files)                          % for each one    
                File = strsplit(files{k}, '.');             % gets file name without extension
                File = string(File{1});
                FileNames = [FileNames;File];               % stack it to "FileNames" array
            end
        end

        if isempty(data)                                    % If there is no data yet in the list or all was deleted
            set(handles.uitable,...                         % just paste "FileNames" in the "RowName"
                'RowName',   FileNames)                     
        else                                                % If there was already data
            FileList = [FileList;FileNames];                % stack the new FileNames to the pre-existing FileList  
            set(handles.uitable, ...                        % and past it to the "RowName"
                'RowName',FileList)                                                         
        end

        data(size(data,1)+1,:) = cell(1,7);                 % Add an extra row to the "Userdata" and "Data" properties of the table
        set(handles.uitable, ...                            % Update them
        'Data',     data, ...
        'Userdata', data);
    end

%----------------------
% "Delete File" Button
%----------------------
myimage = imread('./DeleteFileIcon.png');
myIcon = imresize(myimage, [20, 20]);
uipushtool(handles.toolbar, ...
    'TooltipString',    'Delete unselected files',...
    'CData',            myIcon,...
    'Tag',              'pushtool_delfile',...
    'Enable',           'on',...
    'ClickedCallback',  @pushbutton_delete_Callback)
    
   function pushbutton_delete_Callback(~,~)
       
        qst = 'Are you sure you need to delete this information?'; % As a precaution measure, everytime data is deleted, the user should be questioned
        button = questdlg(qst,'WARNING DELETE','Yes','No','No');   % No is the default button selected
        
        if strcmp(button,'Yes')

            FileNames = get(handles.uitable, 'Rowname'); % Gets file name in the row header
            data = get(handles.uitable,'Userdata');      % Gets Userdata in the table
            select = cell2mat(data(:,1));                 % Gets selection status of the data
            n = numel(data(:,1));
            for k=n:-1:1                                 % Starting from the end of the table, otherwise we'll have problems with the indexing
                if select(k) == 0                        % If the selection state is OFF             
                    data(k,:) = '';                      % Clears the information on this row
                    FileNames(k) = '';                   % And also the row header
                end
            end
            set(handles.uitable, ...                     % In the end sets
                'Data',data, ...                         % updated displayed data
                'Userdata',data, ...                     % userdata
                'Rowname',FileNames)                     % and headers
        end
        
    end


%--------------------
% "Save Plot" Button
%--------------------
myimage = imread('./SavePlotIcon2.png');
myIcon = imresize(myimage, [20, 20]);
uipushtool(handles.toolbar, ...
    'TooltipString',    'Save Plot',...
    'CData',             myIcon,...
    'Tag',              'pushtool_saveplot',...
    'Enable',           'on',...
    'ClickedCallback',  @pushbutton_SavePlot_Callback)
%----------                                                     ----------%

    function PlotData(~,~)
        data = get(handles.uitable,'Userdata');
        tmp = get(handles.uitable, 'Rowname');  % Get data stored in the Data Details table as "Userdata"
        Labels = data(:,3);                     % Labels for each data set 
        select = cell2mat(data(:,1));           % Selection state of the data

        % Plot the selected data set
        %cla(handles.axes_Time, 'reset')        %reset plot
        axes(handles.axes_Time);                %Select "Time" axes
        
        for k = 1:numel(tmp)
            if select == 1 
                InputData = load(strcat('.\',string(tmp(k)),'.m'));
                Time = InputData(:, 1);
                SR = InputData(:, 2);
        
                my_color = rand(1,3);
                all_marks = {'o','+','*','x','s','d','^','v','>','<','p','h'};
        
                plot(Time, SR, ...
                    'LineStyle',    'none', ...
                    'Marker',       all_marks{mod(k,12)},...
                    'LineWidth',    2, ...
                    'Color',        my_color, ...
                    'MarkerSize',   6, ...
                    'DisplayName',  string(Labels(k)))
                legend('Location',  'northeast')
                legend('boxoff')
                xlabel('Time (months)')
                ylabel('SR (%)')
                axis([0 inf 0 100])
                title('Clinical Data') 
            end
        end
    end
%----------                                                     ----------%

%--------------------------------------------------------------------------
% "DATA DETAILS" PANEL
%--------------------------------------------------------------------------
handles.panel_DataDetails = uipanel('Parent',mainFig,...   
    'Tag',              'panel_DataDetails',...
    'Title',            'Data Details',...
    'Units',            'Normalized',...
    'Position',         [.01 .62 .38 .30],...
    'HighlightColor',   'm',...
    'ForegroundColor',  'k',...
    'FontSize',         12);

%-----------------------------
% "DATA DETAILS" UITABLE
%-----------------------------
handles.uitable = uitable(handles.panel_DataDetails,...        
    'Tag',              'uitable',...
    'Data',             TestData,...                    % Data displayed on the table
    'Units',            'normalized', ...
    'Position',         [0.01 0.05 .98 .95],...
    'ColumnEditable',   true,...
    'ColumnWidth',      {70 70 70 70 70 70 70 70},...
    'ColumnFormat',     {'logical' 'char' 'char' 'numeric' 'numeric' 'numeric' 'numeric'},...                                     
    'ColumnName',       {'Select' 'Author' 'Label' 'Nr. Patients' 'D [Gy]' 'd [Gy/fx]' 'T [days]'},...
    'Tooltip',          {['<html>Select: data to fit<br />' ...
                          'Author: of the study<br /> ' ...
                          'Label: to be used in the plot<br />' ...
                          'Nr. Patients: total number of patients in the study<br /> ' ...
                          'D: total prescription dose in grey<br /> ' ...
                          'd: dose administrated in each fraction in grey per fraction<br />' ...
                          'T: total treatment time in days </html>']},...
    'RowName',          handles.FileNames,...
    'Userdata',         TestData,...                    % Data that can be accesible by the user
    'CellEditCallback', @datauitable_Callback);

    function datauitable_Callback(hObject, event)
        tmp = get(hObject, 'Data');                     % Get data from the table
        indices = event.Indices();                      % Index the edited cell
        input = cell2mat(tmp(indices(1), indices(2)));  % Input kept as a number

        if indices(2)>3                                 % If a cell in columns 4, 5, 6 or 7 is changed                            
            if ~isnan(input)                            % check if it's not NaN 
                set(hObject, 'Userdata', tmp);          % keeps Data in the table and updates Userdata 
            else                                        % If input is NaN
                prevState = get(hObject, 'Userdata');   % gets previous state of the table stored in the Userdata
                set(hObject, 'Data', prevState)         % updates the data in the table back to the previous state, before editing
                msgbox('Input should be a number')      % warns what the input must be
            end

        elseif indices(2) == 1                          % If a cell in column 1 is changed (Selection state)
            set(hObject, 'Userdata', tmp);              % updates Userdata
            PlotData
        end
    end


                     
    
%----------                                                     ----------%

%--------------------------------------------------------------------------
% "PLOTS" PANEL
%--------------------------------------------------------------------------
handles.panel_Plot = uipanel('Parent',mainFig,...
    'Tag',              'panel_Plot',...
    'Title',            'Plots',...
    'Units',            'Normalized',...
    'Position',         [.395 .01 .6 .99],...
    'HighlightColor',   'k',...
    'ForegroundColor',  'k',...
    'FontSize',         12);

%---------------------------
% AXES TO PLOT DATA and FIT 
%---------------------------
handles.axes_Time = axes('Parent',handles.panel_Plot,...
    'Units','Normalized','Position',[0.1 0.1 0.4 0.85],...
    'Visible','on');
xlabel('Time (months)'),ylabel('SR (%)'), axis([0 1 0 100]), title(' '), hold on
enableDefaultInteractivity(handles.axes_Time)
 
%-------------------------
% AXES TO PLOT BED
%-------------------------
handles.axes_BED = axes('Parent',handles.panel_Plot,...
    'Units','Normalized','Position',[0.57 0.1 0.4 0.85],...
    'Visible','on');
xlabel('BED (Gy)'),ylabel('SR (%)'), axis([0 1 0 100]), title(' '), hold on
enableDefaultInteractivity(handles.axes_BED)
%----------                                                     ----------% 

%--------------------------------------------------------------------------
% "MODEL OPTIONS" PANNEL
%--------------------------------------------------------------------------
panel_Fit = uipanel('Parent', mainFig, ...
    'Tag',              'panel_Fit', ...
    'Title',            'Model Options', ...
    'Units',            'normalized', ...
    'Position',         [.01 .315 .38 .3],...
    'HighlightColor',   "#EDB120",...
    'ForegroundColor',  'k',...
    'FontSize',         12);

%----------------------------
% FIT1 or FIT2 RADIO BUTTONS
%----------------------------
handles.FitSelection = uibuttongroup('Parent',panel_Fit,...
    'Title',                ' ',...
    'Tag',                  'buttongroup',...
    'FontSize',             10,...
    'FontWeight',           'bold',...
    'Units',                'normalized', ...
    'Position',             [.05 .02 .5 .22],...
    'UserData',             {},...
    'SelectionChangeFcn',   @FitSelection_Callback);

handles.radiobutton_Fit1 = uicontrol(handles.FitSelection,...
    'Tag',                  'radiobutton_Fit1',...
    'Style',                'radiobutton',...
    'String',               'Fit1',......
    'Units',                'Normalized', ...
    'Position',             [.2 .3 .2 .5],...
    'FontSize',             10,...
    'HorizontalAlignment',  'right',...
    'TooltipString',        ['<html><center>Select Model 1:<br />' ...
                             'SR(d,D,&tau) = exp(-K exp(-[&alpha(1+d/(&alpha/&beta)) D - &gamma T - a(&tau - T))<sup>&delta</sup>]))<br />' ...
                             ' </center> <br />' ...
                             'SR: Survival Rate in percentage (%) <br />' ...
                             '&tau: enlapsed time from the beggining of the treatment (UNITS???) <br />' ...
                             '&gamma = ln2/T<sub>d</sub>, &alpha and &beta characterize the intrinsic radiosensitivity of cells >br />' ...
                             'T<sub>d</sub>: potential doubling time <br />' ...
                             'K, a and &delta are the remaining fitting parameters. </html>']);


handles.radiobutton_Fit2 = uicontrol(handles.FitSelection,...
    'Tag',                      'radiobutton_Fit2',...
    'Style',                    'radiobutton',...
    'String',                   'Fit2',......
    'Units',                    'Normalized', ...
    'Position',                 [.8 .3 .2 .5],...
    'FontSize',                 10,...
    'HorizontalAlignment',      'left',...
    'TooltipString',            ['<html><center>Select Model 2:<br /> ' ...
                                 'SR(d,D,&tau) = 1 - (2&pi)<sup>-1/2</sup> &int<sub>-&infin</sub><sup>t</sup> exp(-x<sup>2</sup>/2) dx <br /> ' ...
                                 't = (exp(-[&alpha(1+d/(&alpha/&beta))D - &gamma T -(&gamma(&tau - T))<sup>&delta</sup>])-K<sub>50</sub>/K<sub>0</sub>)/(&sigma<sub>k</sub>/K<sub>0</sub>) <br /> ' ...
                                 '</center> <br />' ...
                                 'SR: Survival Rate in percentage (%) <br /> ' ...
                                 '&tau: enlapsed time from the beggining of the treatment (UNITS???) <br /> ' ...
                                 't = (K - K<sub>50</sub>)/&sigma<sub>k</sub> <br />' ...
                                 'K<sub>50</sub> is the critical number of tumor clonogens corresponding to death in 50% patients <br />' ...
                                 '&sigma<sub>k</sub> is the gaussian width for the distribution of critical clonogen numbers <br />' ...
                                 'Dependence of tumor cells on D, d, T and &tau is given by the following LQ inspired model: <br />' ...
                                 'K = K<sub>50</sub> exp(-[&alpha(1+d/(&alpha/&beta))D - &gamma T -(&gamma(&tau - T))<sup>&delta</sup>]) <br />' ...
                                 '(&gamma(&tau - T))<sup>&delta</sup> characterizes the time dependence of tumor regrowth after completions of RT. </html>']);

    
    function FitSelection_Callback(hObject,~)
        tmp = get(hObject, 'SelectedObject');
        if strcmp(tmp.String, 'Fit1')
            set(handles.fit1optionsuitable, 'Visible', 'on');
            set(handles.fiteduitable1,      'Visible', 'on');
            set(handles.fit2optionsuitable, 'Visible', 'off');
            set(handles.fiteduitable2,      'Visible', 'off');
        elseif strcmp(tmp.String, 'Fit2')
            set(handles.fit1optionsuitable, 'Visible', 'off');
            set(handles.fiteduitable1,      'Visible', 'off');
            set(handles.fiteduitable2,      'Visible', 'on');
            set(handles.fit2optionsuitable, 'Visible', 'on');
        end
    end


%----------------------------
% "MODEL OPTIONS" UITABLE
%----------------------------
handles.fit1optionsuitable = uitable(panel_Fit,...
    'Tag',              'fit1optionsuitable',...
    'ColumnFormat',     {'numeric' 'numeric' 'numeric' 'numeric' 'numeric' 'numeric'},...
    'Data',             ModelOptions1,...
    'Units',            'normalized', ...
    'Position',         [0.01 .25 .99 .745],...
    'Visible',          'on',...
    'ColumnEditable',   true,...
    'ColumnWidth',      {65 65 65 65 65 65 65 65},...
    'ColumnName',       {'K' '<html><center />&alpha<br /> [Gy<sup>-1</sup>]</html>' ...
                         '<html><center />&beta<br />[Gy<sup>-2</sup>]</html>' '<html>&gamma</html>' ...
                         '<html><center />a <br />[mo<sup>-1</sup>]</html>' '<html>&delta</html>'},...
    'RowName',          {'Initial Guess' 'Lower limit' 'Upper limit'},...
    'Userdata',         ModelOptions1,...
    'Tooltip',          {['<html><center> Define options to perform the fit </center><br />' ...
                          'Initial guess: an apropriate guess for each parameter, based on the radiobiological expertise of the user. <br />' ...
                          'Lower limit: lower bound of a range to serach for the fited parameter. <br />' ...
                          'Upper limit: upper bound of a range to serach for the fited parameter. <br />' ...
                          '<br />'...
                          'NOTES: <br />' ...
                          '- the initial guess should be inside the lower to upper limits range; <br />' ...
                          '- the wider the range, the more probable is that the algorithm will not converge to an optimal solution, or will converge at all; </html>']},... 
    'CellEditCallback', @fitoptionsuitable_Callback);

handles.fit2optionsuitable = uitable(panel_Fit,...
    'Tag',              'fit2optionsuitable',...
    'ColumnFormat',     {'numeric' 'numeric' 'numeric' 'numeric' 'numeric' 'numeric'},...
    'Data',             ModelOptions2,...
    'Units',            'normalized', ...
    'Position',         [0.01 .25 .99 .745],...
    'Visible',          'off',...
    'ColumnEditable',   true,...
    'ColumnWidth',      {65 65 65 65 65 65 65 65},...
    'ColumnName',       {'<html>K<sub>50</sub><span>&#47;</span>K<sub>0</sub></html>'...
                         '<html><center />&alpha<br /> [Gy<sup>-1</sup>]</html>' ...
                         '<html><center />&beta<br />[Gy<sup>-2</sup>]</html>'...
                         '<html>&gamma</html>' ...
                         '<html><center /> &sigma<sub>k</sub> <span>&#47;</span>K<sub>0</sub></html>'...
                         '<html>&delta</html>'},...
    'RowName',          {'Initial Guess' 'Lower limit' 'Upper limit'},...
    'Userdata',         ModelOptions2,...
    'Tooltip',          {['<html><center> Define options to perform the fit </center><br />' ...
                          'Initial guess: an apropriate guess for each parameter, based on the radiobiological expertise of the user. <br />' ...
                          'Lower limit: lower bound of a range to serach for the fited parameter. <br />' ...
                          'Upper limit: upper bound of a range to serach for the fited parameter. <br />' ...
                          '<br />'...
                          'NOTES: <br />' ...
                          '- the initial guess should be inside the lower to upper limits range; <br />' ...
                          '- the wider the range, the more probable is that the algorithm will not converge to an optimal solution, or will converge at all; </html>']},...
    'CellEditCallback', @fitoptionsuitable_Callback,...
    'CellSelectionCallback', @CellSelectionCalback);

    function fitoptionsuitable_Callback(hObject,event)
        
        tmp = get(hObject,'Data');                       % keep the data from the table somwhere
        input = cell2mat(...
                tmp(event.Indices(1),event.Indices(2))); % The input given by the user is kept as a double
        if ~isnan(input)                                 % If the input is other than numeric, it will be passed as
            set(hObject, ...                             % a NaN double;
                'Userdata',tmp);                         % If the input is not a NaN, then it's kept on the table and stored in the Userdata
        else                                             % Otherwise, if the input is NaN
            prevState = get(hObject, 'Userdata');        % Gets the previous state of the table, stored in the Userdata
            set(hObject, ...
                'Data', prevState);                      % Updates the data in the table back to the previous state, before editing
            errordlg(['Input must be a number!' ...      % Propts what the input must be
                      'Use point decimal separator (e.g. 3.14 instead of 3,14).' ...
                      ' Cientific notation is valid (e.g. 365 = 3.65e2).'], 'Input Error')            
        end
     end

    function CellSelectionCalback(hObject, eventdata, handles)

        %msgbox('Done');

    end

%------------------------------------------------
% "PERFORM FIT" BUTON
%------------------------------------------------
handles.pushbutton_fit = uicontrol(panel_Fit,...
    'Tag',              'pushbutton_Fit',...
    'Style',            'pushbutton', ...
    'String',           'Fit',...
    'Units',            'Normalized',...
    'FontSize',         12,...
    'Position',         [.6 .02 .15 .22],...
    'Enable',           'on',...
    'ForegroundColor',  "#A2142F",...
    'BackgroundColor',  '#77AC30',...
    'Tooltipstring',    'Perform fit for the selected files',...
    'Callback',         @pushbutton_Fit_Callback);

    function pushbutton_Fit_Callback(~,~)
        data = get(handles.uitable,'Userdata');              % Gets "Userdata" from Data Details table
        state1 = get(handles.fit1optionsuitable, 'Visible'); % State of button Fit1 (On or Off)
        state2 = get(handles.fit2optionsuitable, 'Visible'); % State of button Fit2 (On or Off)
        DataFiles = strings(0);
        DataSetsList = get(handles.uitable,'RowName');
       
        if isempty(data)                                     % If the table is empty
            disp('No data to show')                          % Nothing to display
        else                                                 % If the table contains data
            cla(handles.axes_Time, 'reset')                  % clear both axes
            cla(handles.axes_BED, 'reset')
            axes(handles.axes_Time)                          % Select axes_Time
            enableDefaultInteractivity(handles.axes_Time)    % Enable its interactivity

            Selected = data(:,1);                                                           % Selection state of the data
            for i = 1:numel(Selected)                       
                if isequal(Selected(i),{1})                                                 % If it's selected
                    DataFiles = [DataFiles  strcat(".\",string(DataSetsList(i,:)),".m")];   % Complete the file names with the extension
                    file_names = cellstr(DataFiles);
                end
            end
        if strcmp(state1, 'on')                                                     % If Fit1 model it's selected
            Bounds = get(handles.fit1optionsuitable, 'Userdata');                   % Check initial guess, upper and lower bounds to perform the fit
            [K, alpha, beta, gamma, a, Td, delta] = fit1(file_names, data, Bounds); % Performs Fit1
            FitData = {round(str2double(K),5)...                                    % Stores fited parameters
                       round(str2double(alpha),5)...
                       round(str2double(beta),5)...
                       round(str2double(alpha)/str2double(beta),3)...
                       round(str2double(gamma),5)...
                       round(str2double(a),5)...
                       round(str2double(Td),0)...
                       round(str2double(delta),5)};
            set(handles.fiteduitable1,...                   % Keep fited parameters information
                'Data', FitData,...                         % and displays it on the table
                'Userdata', FitData)
            axes(handles.axes_BED);                         % Now selects axes_BED
            enableDefaultInteractivity(handles.axes_BED)    % enables its interactivity
            BED(data);                                      % Performs BED calculation
            %msgbox('Complete!')

        elseif strcmp(state2, 'on')                                                              % If Fit2 model is selected
            Bounds = get(handles.fit2optionsuitable, 'Userdata');                                % Check initial guess, upper and lower bounds to perform the fit
            [K50_K0, alpha, beta, gamma, Td, sigmak_k0, delta] = fit2(file_names, data, Bounds); % Performs Fit2
            FitData = {RoundStr2Double(K50_K0,3)...                                              % Stores fited parameters
                       RoundStr2Double(alpha,5)...
                       RoundStr2Double(beta,3)...
                       round(str2double(alpha)/str2double(beta),5)...
                       RoundStr2Double(gamma,5)...
                       RoundStr2Double(Td,0)...
                       RoundStr2Double(sigmak_k0,5)...
                       RoundStr2Double(delta,5)};
            set(handles.fiteduitable2,...                   % Keeps fited parameters information                           
                'Data', FitData,...                         % and displays it on the table
                'Userdata', FitData)
            axes(handles.axes_BED);                         % Selects axes_BED
            enableDefaultInteractivity(handles.axes_BED)    % enables its interactivity
            BED(data);                                      % Performs BED calculation
            %msgbox('Complete!')
        end
        end
    end

%------------------------------------------------
% "CLEAR FIT AXES" BUTON
%------------------------------------------------
handles.pushbutton_ClearFitAxes = uicontrol(panel_Fit,...
    'Tag',              'pushbutton_ClearFitAxes',...
    'Style',            'pushbutton', ...
    'String',           'Clear',...
    'Units',            'Normalized',...
    'Position',         [.8 .02 .15 .22],...
    'Enable',           'on',...
    'ForegroundColor',  "#EDB120",...
    'Tooltipstring',    'Clear "Fited Data" axes',...
    'Callback',         @pushbutton_ClearFitAxes_Callback);

function pushbutton_ClearFitAxes_Callback(~,~)

    cla(handles.axes_Time, 'reset')                 % Clear axes_Time
    axes(handles.axes_Time);                        % Selects it again
    xlabel('Time (months)')                         % Set labels
    ylabel('SR (%)')
    axis([0 inf 0 100])                             % Axis limits [x_min x_max y_min y_max] inf means it fits to the content
    title(' ')                                      % No title when cleared
    hold on;
    enableDefaultInteractivity(handles.axes_Time)   % Enables intereactivity+

    cla(handles.axes_BED, 'reset')                  % Clear axes_BED
    axes(handles.axes_BED);
    xlabel('BED (Gy)')
    ylabel('SR (%)')
    axis([0 inf 0 100])
    title(' ') 
    hold on;
    enableDefaultInteractivity(handles.axes_BED) 

end
%----------                                                     ----------%

%--------------------------------------------------------------------------
% "FITED PARAMETERS" PANEL
%--------------------------------------------------------------------------
handles.panel_Fited = uipanel('Parent', mainFig, ...
    'Tag',              'panel_Fited', ...
    'Title',            'Fited Parameters', ...
    'Units',            'normalized', ...
    'Position',         [.01 .01 .38 .30],...
    'HighlightColor',   'r',...
    'ForegroundColor',  'k',...
    'FontSize',         12);

%----------------------------
% "FITED PARAMETERS" UITABLES
%----------------------------
handles.fiteduitable1 = uitable(handles.panel_Fited,...
    'Tag',              'fiteduitable1',...
    'ColumnFormat',     {'' '' '' '' '' '' '' ''},...
    'Data',             FitData,...
    'Units',            'normalized', ...
    'Position',         [0.01 .1 .99 .9],...
    'Visible',          'on',...
    'ColumnEditable',   false,...
    'ColumnWidth',      {65 65 65 65 65 65 65 65},...
    'ColumnName',       {'K' ...
                         '<html><center />&alpha <br /> [Gy<sup>-1</sup>]</html>' ...
                         '<html><center />&beta <br /> [Gy<sup>-2</sup>]</html>' ...
                         '<html>&alpha<span>&#47;</span>&beta<br />[Gy]</html>' ...
                         '<html>&gamma</html>' ...
                         '<html><center>T<sub>d</sub><br />[day]</html>' ...
                         '<html><center />a <br /> [mo<sup>-1</sup>]</html>' ...
                         '<html>&delta</html>'},...
    'RowName',           {'Results' 'Lower uncty.' 'Upper uncty.'},...
    'Userdata',          FitData,...
    'Tooltip',           {['Results of the fited parameters with lower and upper bound uncertainties.']},...
    'CellEditCallback',  @fiteduitable_Callback);


handles.fiteduitable2 = uitable(handles.panel_Fited,...
    'Tag',              'fiteduitable2',...
    'ColumnFormat',     {'char' 'char' 'char' 'char' 'char' 'char' 'char' 'char'},...
    'Data',             FitData,...
    'Units',            'Normalized', ...
    'Position',         [0.01 .3 .99 .7],...
    'Visible',          'off',...
    'ColumnEditable',   false,...
    'ColumnWidth',      {65 65 65 65 65 65 65 65},...
    'ColumnName',       {'<html>K<sub>50</sub><span>&#47;</span>K<sub>0</sub></html>' ...
                         '<html><center />&alpha<br /> [Gy<sup>-1</sup>]</html>' ...
                         '<html><center />&beta<br />[Gy<sup>-2</sup>]</html>' ...
                         '<html>&alpha<span>&#47;</span>&beta<br />[Gy]</html>' ...
                         '<html>&gamma</html>' ...
                         '<html><center>T<sub>d</sub><br />[day]</html>' ...
                         '<html><center /> &sigma<sub>k</sub> <span>&#47;</span>K<sub>0</sub></html>' ...
                         '<html>&delta</html>'},...
    'RowName',           {'Results' 'Lower uncty.' 'Upper uncty.'},...
    'Userdata',          FitData,...
    'Tooltip',           {['Results of the fited parameters with lower and upper bound uncertainties.']},...
    'CellEditCallback',  @fiteduitable_Callback);

    function fiteduitable_Callback(~,~)
    end

%-----------------------------------
% "FITED PARAMETERS" SAVE PLOT BUTTON
%-----------------------------------
% handles.pushbutton_SavePlot = uicontrol(handles.panel_Fited,...
%     'Tag',              'pushbutton_SavePlot',...
%     'Style',            'pushbutton', ...
%     'String',           '<html><center />Save<br /> Plot</html>',...
%     'Units',            'Normalized',...
%     'Position',         [.80 .005 .1 .25],...
%     'Enable',           'on',...
%     'ForegroundColor',  'r',...
%     'Tooltipstring',    'Perform fit',...
%     'Callback',         @pushbutton_SavePlot_Callback);
% 
    function pushbutton_SavePlot_Callback (~,~)

        FileName = inputdlg('Enter file name and extension (.png, .pdf, .jpg, .fig, .m, .jpeg, .svg):');

        fignew = figure('Visible','off'); % Invisible figure
        newAxes = copyobj(handles.axes_BED,fignew); % Copy the appropriate axes
        set(newAxes,'Position',get(groot,'DefaultAxesPosition')); % The original position is copied too, so adjust it.
        set(fignew,'CreateFcn','set(gcbf,''Visible'',''on'')'); % Make it visible upon loading
        saveas(fignew,string(FileName));
        delete(fignew);
    end
%----------%

end %main