function main
% function main
% HELP: this function serves as an hypothetical example to be used 
% in the lectures of Diagnóstico e Terapia com Radiações e Protões
%
% INPUT
% * none
%
% OUTPUT
% * none
%
% SEE ALSO: 
%
% -------------------------------------------------------------------------
% Authors:
% R. Pires
% A. Pardal
% R. Santos
% 
% Last Update: 10/05/2023
% 
% adapted from bcf's teraPro function made in 09-01-2023
% -------------------------------------------------------------------------


%-----------------------------------------------------
% Initialize some variables for demonstration purposes
%-----------------------------------------------------
data = {};
TestData = {true 'Data1.m' 'data1' 128 53.6 4.88 28;...
            true 'Data2.m' 'data2' 35 61.5 1.5 42;...
            true 'Data3.m' 'data3' 83 55 1.8 37;...
            true 'Data4.m' 'data4' 51 45 1.8 37;...
            true 'Data5.m' 'data5' 24 32.5 1.8 37};
FitData = {};
%---

%---------------------------------------------------------------
% BUILD THE MAIN FIGURE
%---------------------------------------------------------------
mainFig =figure(1);
set(mainFig ,'Name','SR Modeling',...
    'Position',[500 300 1280 566],...
    'KeyPressFcn',@figure_keyPressFcn,...
    'MenuBar','None');
clf, % clear the figure

    function figure_keyPressFcn(hObject,eventdata)
                
        switch eventdata.Key
            case 'return'
                set(hObject,'Color','r')  
            case 'backspace'
                set(hObject,'Color','b')
            case 'escape'
                set(hObject,'Color',[1 0.5 0])    
        end
    end


% ADD CIENCIAS LOGO
%-------------------
[tmp,~,alfa] = imread('ciencias_ul_azul_h_s-ass.png');
%maximize the use of temporary variables
handles.axes_logo = axes('Parent',mainFig,...
    'Units','Normalized','Position',[0.03 0.87 0.12 0.12],...
    'Visible','off');
tmp=image(tmp);
set(tmp, 'AlphaData', alfa);
axis equal off
%---



%---------------------------------------------------------------
% BUILD THE MENU
%---------------------------------------------------------------
handles.uimenu_new = uimenu(mainFig,'Label','New');
handles.uimenu_newFile = uimenu(handles.uimenu_new,...
    'Label','New File...',...
    'Callback',@uimenu_new_callback);
handles.uimenu_saveFile = uimenu(handles.uimenu_new,...
    'Label','Save...',...
    'Separator','on',...
    'Callback',@uimenu_save_callback); % See Also: UImenu properties


    % the advantage of having the Callback function close to the creation
    % of the object is that it is easy to get there with the Go To...
    function uimenu_new_callback(~,~)
        
        warndlg(['No action will happen when Pressing OK because'...
            ' this Callback function is not programmed yet!'],...
            '!! Warning !!')
        
        % See Also: dialog, questdlg, errordlg
    end

    function uimenu_save_callback(~,~)
        
        % Can be any variable stored in the interface or the workspace
        uisave({'data'},'ListStudents.mat') %Suggested filename
        
        %See Also: uigetfifle, uiopen
    end

%---------------------------------------------------------------
% ADD A TOOLBAR
%---------------------------------------------------------------
handles.toolbar=uitoolbar(mainFig);
%diretory = 'matlabDTRP';
b=load('.\myloginicon.mat');
uipushtool(handles.toolbar,'CData',b.icon,...
    'TooltipString','Login',...
    'Tag','pushtool_login',...
    'Enable','on',...
    'ClickedCallback','menu_login_Callback();')
b=load('.\mylogouticon.mat');
uipushtool(handles.toolbar,'CData',b.icon,...
    'TooltipString','Logout',...
    'Tag','pushtool_logout',...
    'Enable','off',...
    'ClickedCallback','menu_logout_Callback();')
% CallBack Functions or any other functions
% do not need to be inside this file
%-


%---------------------------------------------------------------
% BUILD A PANEL
%---------------------------------------------------------------
panel_DataList = uipanel('Tag','panel_DataList',...
    'Title',            'List',...
    'Units',            'Normalized',...
    'Position',         [.01 .007 .17 .84],...
    'HighlightColor',   [0 0 1],...
    'FontSize',         12,...
    'Parent',           mainFig);

% is text no need to keep the handle
uicontrol(panel_DataList,...
    'Tag','text',...
    'Style',' Text', ...
    'String','Data Sets',...
    'FontName', 'Arial',...
    'FontSize',13,...
    'Units','Normalized',...
    'Position',[.05 .95 .88 .05],...
    'Enable','on',...
    'Callback',@listbox_Callback);

handles.listbox_DataSets = uicontrol(panel_DataList,...
    'Tag','listbox_DataSets',...
    'Style',' listbox', ...
    'String',{'Data1', 'Data2', 'Data3', 'Data4', 'Data5'},...
    'Units','Normalized',...
    'Position',[.1 .2 .75 .75],...
    'Enable','on',...
    'Callback',@listbox_DataSets_Callback);
% String defined as cell to accomodate different size strings
% String can be a list read directly from a file or a database which then
% fills up the listbox

    function listbox_DataSets_Callback(hObject, ~)
        handles.pushbutton_delete.Enable ='on';   
        % Get entries in listbox_DataSets
        DataSetsList = get(handles.listbox_DataSets,'String');
        tmp = get(hObject, 'String');
        val = get(hObject, 'Value');  
        % Get data stores in the Data Details table as "Userdata"
        data = get(handles.uitable,'Userdata');
        % Labels for each data set
        Labels = data(:,3);    
        % Plot the selected data set
        for i = 1:numel(DataSetsList)
            if strcmp(tmp(val), DataSetsList(i))
                InputData = load(strcat('.\',string(tmp(val,:)),'.m'));
                cla(handles.axes_plot, 'reset') %reset plot
                Time = InputData(:, 1);
                SR = InputData(:, 2);
                plot(Time, SR, '*', ...
                    'LineWidth', 2, ...
                    'Color', '#FD04FC', ...
                    'MarkerSize', 6, ...
                    'DisplayName', string(Labels(i)))
                legend('Location', 'northeast')
                legend('boxoff')
                xlabel('Time (months)')
                ylabel('SR (%)')
                title('Clinical Data')               
            end
        end
    end


handles.pushbutton_add = uicontrol(panel_DataList,...
    'Tag','pushbutton_add',...
    'Style',' pushbutton', ...
    'String','Add new data set',...
    'Units','Normalized',...
    'Position',[.1 .12 .75 .07],...
    'Enable','on',...
    'ForegroundColor', "#77AC30",...
    'Tooltipstring','This button allows to add a new data set to be uploaded to the fitting function',...
    'Callback',@pushbutton_add_Callback);

    function pushbutton_add_Callback(~,~)
        % Get data from the Data Details table
        data = get(handles.uitable,'Userdata');
        % Get entries in listbox_DataSets
        DataSetsList = get(handles.listbox_DataSets,'String'); 
        n=numel(DataSetsList); 
        % if there is no data yet in the list or all was deleted
        if isempty(DataSetsList)
            file = uigetfile; % Selects file
            FileName = strsplit(file, '.');
            FileName = string(FileName{1}); % Gets file name
            set(handles.listbox_DataSets,'String',FileName,...
                                         'Value',1) % leave this student selected

            data(size(data,1)+1,:) = cell(1,7);
            set(handles.uitable, ...
                'Rowname'      ,    get(handles.listbox_DataSets,'String'),...
                'Data'         ,    data, ...
                'Userdata'     ,    data);
        else
            %check the number of the last student and add a student
            %with a new number
            file = uigetfile; % Selects file
            FileName = strsplit(file, '.');
            FileName = string(FileName{1}); % Gets file name
            DataSetsList = [DataSetsList;FileName];              
            set(handles.listbox_DataSets,'String',DataSetsList,...
                'Value',n)% leave last student selected                

            data(size(data,1)+1,:) = cell(1,7);
            set(handles.uitable,...
                'Rowname',get(handles.listbox_DataSets,'String'),...
                'Data', data, ...
                'Userdata',data);

        end
    end

handles.pushbutton_delete = uicontrol(panel_DataList,...
    'Tag','pushbutton_delete',...
    'Style',' pushbutton', ...
    'String','Delete',...
    'Units','Normalized',...
    'Position',[.1 .02 .75 .07],...
    'Enable','off',...
    'ForegroundColor', 'r',...
    'Callback',@pushbutton_delete_Callback);

    function pushbutton_delete_Callback(~,~)
        
        % As a precaution measure, everytime data is deleted, the user
        % should be questioned
        qst = 'Are you sure you need to delete this information?';
        button = questdlg(qst,'WARNING DELETE','Yes','No','No');
        % No is the default button selected
        if strcmp(button,'Yes')
            DataList = get(handles.listbox_DataSets,'String');
            val=get(handles.listbox_DataSets,'Value');
            DataList(val) ='';
            set(handles.listbox_DataSets,'String',DataList,'Value',1)        
            % all information related to that instance needs to be erased
            %set(handles.edit_date,'String','')
            set(handles.uitable,...
                'Rowname',get(handles.listbox_DataSets,'String'))
            data = get(handles.uitable,'Userdata');%or get(handles.uitable,'Data');
            data(val,:)='';
            set(handles.uitable,'Data',data,'Userdata',data)
        end
        
    end


%---------------------------------------------------------------
% BUILD A NEW PANEL
%---------------------------------------------------------------
handles.panel_DataDetails = uipanel('Parent',mainFig,...
    'Tag',              'panel_DataDetails',...
    'Title',            'Data Details',...
    'Units',            'Normalized',...
    'Position',         [.19 .2 .75 .79],...
    'HighlightColor',   'm',...
    'ForegroundColor',  'k',...
    'FontSize',         12);


%------------------------------------------------------------------
% BUILD UITABLE
%------------------------------------------------------------------
handles.uitable = uitable(handles.panel_DataDetails,...
    'Tag','uitable',...
    'ColumnFormat',{'logical' 'char' 'char' 'numeric' 'numeric' ...
                                 'numeric' 'numeric'},...
    'Data',TestData,...
    'Units','Normalized', ...
    'Position',[0.01 0.01 0.5 0.85],...
    'ColumnEditable',true,...
    'ColumnName',{'Select' 'Author' 'Label' 'Nr.  Patients' 'D [Gy]' 'd [Gy/fx]' 'Td [days]'},...
    'RowName',get(handles.listbox_DataSets,'string'),...
    'Userdata',TestData,...
    'CellEditCallback',@uitable_Callback);


    % if there is more than one uitable, give it an more appropriate name
     function uitable_Callback(hObject,~)
        tmp = get(hObject,'Data');
        % keep the data from the table somwhere
        set(handles.uitable, ...
            'Userdata',tmp);
        % another way to store variables in the workspace
        assignin('base','data',tmp);
    end


%------------------------------------------------------------------
% BUILD AXES TO PLOT DATA
%------------------------------------------------------------------
handles.axes_plot = axes('Parent',handles.panel_DataDetails,...
    'Units','Normalized','Position',[0.58 0.1 0.4 0.85],...
    'Visible','on');
xlabel('Time (months)'),ylabel('SR (%)'),hold on

%------------------------------------------------------------------
% CALLS FIT FUNCTION
%------------------------------------------------------------------

    function Fit(hObject,~)       
        %%%   !!!   !!!!!   !!!   %%%
        %%%   !!!   TO DO   !!!   %%%
        %%%   !!!   !!!!!   !!!   %%%
        tmp = get(hObject,'Data')
        % keep the data from the table somwhere
        set(handles.uitable,'Userdata',tmp)

        Selection = get(handles.uitable,'ColumnFormat');

    end


%------------------------------------------------------------------
% FIT BUTTON
%------------------------------------------------------------------
panel_Fit = uipanel('Parent', mainFig, ...
    'Tag', 'panel_Fit', ...
    'Title','Model Options', ...
    'Units', 'normalized', ...
    'Position',         [.20 .008 .4 .2],...
    'HighlightColor',  "#EDB120",...
    'ForegroundColor',  'k',...
    'FontSize',         12);

handles.pushbutton_fit = uicontrol(panel_Fit,...
    'Tag','pushbutton_Fit',...
    'Style',' pushbutton', ...
    'String','Fit',...
    'Units','Normalized',...
    'Position',[.75 .2 .15 .25],...
    'Enable','on',...
    'ForegroundColor',"#0072BD",...
    'Tooltipstring','Perform fit',...
    'Callback',@pushbutton_Fit_Callback);

    function pushbutton_Fit_Callback(hObject,~)
        
        data = get(handles.uitable,'Userdata')
        DataFiles = strings(0);
        DataSetsList = get(handles.listbox_DataSets,'String')
        Labels = data(:,3)

        if isempty(data)
            disp('No data to show')
        else
            cla(handles.axes_plot, 'reset') %clear axes
            Selected = data(:,1)
            for i = 1:numel(Selected)
                %disp(Selected(i))
                %disp(isequal(Selected(i), {[1]}))
                if isequal(Selected(i),{[1]})
                    disp('File Added')
                    %DataFiles = [DataFiles  strcat(".\",string(DataSetsList(i,:)),".m")]
                    DataFiles = [DataFiles  strcat(".\",string(DataSetsList(i,:)),".m")]
                    file_names = cellstr(DataFiles)
                end
            end
            fit1(file_names, Labels)
        end    
    end


%------------------------------------------------------------------
% FITED PARAMETERS PANEL
%------------------------------------------------------------------
handles.panel_Fited = uipanel('Parent', mainFig, ...
    'Tag', 'panel_Fited', ...
    'Title','Fited Parameters', ...
    'Units', 'normalized', ...
    'Position',         [.60 .01 .35 .2],...
    'HighlightColor',   'r',...
    'ForegroundColor',  'k',...
    'FontSize',         12);

%----------------------------
% FITED PARAMETERS UITABLE
%----------------------------
handles.fiteduitable = uitable(handles.panel_Fited,...
    'Tag','fiteduitable',...
    'ColumnFormat',{'char' 'char' 'char' 'char' 'char' 'char' 'char' 'char'},...
    'Data',FitData,...
    'Units','Normalized', ...
    'Position',[0.1 .2 .6 .8],...
    'ColumnEditable',false,...
    'ColumnName',{'K' 'Alpha' 'Beta' 'alpha/beta' 'gamma' 'a' 'Td' 'delta'},...
    'RowName','',...
    'Userdata',FitData,...
    'CellEditCallback',@uitable_Callback);





handles.pushbutton_SavePlot = uicontrol(handles.panel_Fited,...
    'Tag','pushbutton_SavePlot',...
    'Style',' pushbutton', ...
    'String','Save',...
    'Units','Normalized',...
    'Position',[.80 .01 .1 .20],...
    'Enable','on',...
    'ForegroundColor','r',...
    'Tooltipstring','Perform fit',...
    'Callback',@pushbutton_Fit_Callback);

    function pushbutton_SavePlot_Callback (~,~)

    end


end %main