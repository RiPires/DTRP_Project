function main
% function main
% HELP: this function launches a GUI (Graphical User Interface) to perform
%      survival rate (SR) modeling by fitting different survival models to
%      clinical data inputed by the user
%      
%
% INPUT
% * none
%
% OUTPUT
% * none
%
% SEE ALSO: uimenu, uitoolbar, uipushtool, uipanel, uicontrol, uigetfile,
%           uibuttongroup, 
%
% -------------------------------------------------------------------------
% Authors:
% R. Pires
% A. Pardal
% R. Santos
% 
% Last Update: 20/06/2023
% 
% adapted from bcf's teraPro function made in 09-01-2023
% -------------------------------------------------------------------------


%--------------------------------------------------------------------------
% Initialize some variables for demonstration purposes
%--------------------------------------------------------------------------
data = {};
TestData = {true 'Data1.m' 'data1' 128 53.6 4.88 28;...
            true 'Data2.m' 'data2' 35 61.5 1.5 42;...
            true 'Data3.m' 'data3' 83 55 1.8 37;...
            true 'Data4.m' 'data4' 51 45 1.8 37;...
            true 'Data5.m' 'data5' 24 32.5 1.8 37};

ModelOptions1 = {0.042 0.037 0.002587 0.00608 1268 0.16;... % initial guess
                 0 0 0 0 1000 0;...                         % lower limit     
                 0.05 0.05 0.003 0.007 1500 0.30};          % upper limit

ModelOptions2 = {2.03 0.010 0.000666 0.00542 0.65 0.20;...
                 1.99 0.009 0.000647 0.00495 0.59 0.19;...
                 2.07 0.011 0.000692 0.00598 0.71 0.21};
FitData = {};
handles.FileNames = {'Data1' 'Data2' 'Data3' 'Data4' 'Data5'};
%FitInput = {};

%----------                                                     ----------%

%--------------------------------------------------------------------------
% MAIN FIGURE
%--------------------------------------------------------------------------
mainFig =figure(1);
set(mainFig ,'Name','RADIANCE: Radiotherapy Survival Rate Modeling Interface',...
    'NumberTitle','off',...
    'WindowState', 'maximized',...        % Maximize window by default
    'KeyPressFcn',@figure_keyPressFcn,... % What happens when certain keys are pressed on the keyboard
    'MenuBar','None');
clf, % clear the figure

    function figure_keyPressFcn(hObject,eventdata)
                
        switch eventdata.Key
            case 'return'
                pushbutton_Fit_Callback() 
            case 'backspace'
                set(hObject,'Color','b')
            case 'escape'
                pushbutton_ClearAxes_Callback()
                pushbutton_ClearFitAxes_Callback()       
        end
    end
%----------                                                     ----------%

%--------------------------------------------------------------------------
% CIENCIAS LOGO
%--------------------------------------------------------------------------
[tmp,~,alfa] = imread('ciencias_ul_azul_h_s-ass.png');

handles.axes_logo = axes('Parent',mainFig,...
                         'Units','Normalized', ...
                         'Position',[0.01 0.93 0.07 0.07],...
                         'Visible','off');
tmp=image(tmp);
set(tmp, 'AlphaData', alfa);
axis equal off
%----------                                                     ----------%


%--------------------------------------------------------------------------
% MENU
%--------------------------------------------------------------------------
handles.uimenu_new = uimenu(mainFig, ...
        	                'Label','New');

handles.uimenu_newFile = uimenu(handles.uimenu_new,...
                                'Label','New File...',...
                                'Callback',@uimenu_new_callback);

handles.uimenu_saveFile = uimenu(handles.uimenu_new,...
                                 'Label','Save...',...
                                 'Separator','on',...
                                 'Callback',@uimenu_save_callback);

    function uimenu_new_callback(~,~)
        
        warndlg(['No action will happen when Pressing OK because'...
            ' this Callback function is not programmed yet!'],...
            '!! Warning !!')
        % See Also: dialog, questdlg, errordlg
    end

    function uimenu_save_callback(~,~)        
        % Can be any variable stored in the interface or the workspace
        uisave({'data'},'ListStudents.mat') %Suggested filename
        %See Also: uigetfifle, uiopen
    end
%----------                                                     ----------%

%--------------------------------------------------------------------------
% TOOLBAR
%--------------------------------------------------------------------------
handles.toolbar=uitoolbar(mainFig);

%-------------------
% "Add File" Button
%-------------------
myimage = imread('./AddFileIcon.png');
myIcon = imresize(myimage, [20, 20]);
uipushtool(handles.toolbar, ...
    'TooltipString',    'Add File',...
    'CData',             myIcon,...
    'Tag',              'pushtool_addfile',...
    'Enable',           'on',...
    'ClickedCallback',  @pushbutton_add_Callback)

    function pushbutton_add_Callback(~,~)
        
        data = get(handles.uitable,'Userdata');                 % Get data from the Data Details table
        FileList = get(handles.uitable,'RowName');  % Get entries in listbox_DataSets
        n=numel(FileList); 
        files = uigetfile('*', ...
                           'Select one or more files', ...
                           'MultiSelect','on');                 % GUI that allows to select multiple files
        if ischar(files)                                        % If only one file is selected, "files" is a char vector
            FileNames = strsplit(files, '.');                   % Gets file name without extension
            FileNames = string(FileNames{1});                    
        else                                                    % If multiple files are selected
            FileNames = [];
            for k = 1:numel(files)                              
                File = strsplit(files{k}, '.');
                File = string(File{1});
                FileNames = [FileNames;File];
            end
        end

        if isempty(data)                                % if there is no data yet in the list or all was deleted
            set(handles.uitable,...
                'RowName',   FileNames)
        else 
            FileList = [FileList;FileNames];              
            set(handles.uitable, ...
                'RowName',FileList)                                                         
        end

        data(size(data,1)+1,:) = cell(1,7);
        set(handles.uitable, ...
        'RowName',  FileList,...
        'Data',     data, ...
        'Userdata', data);
    end

%----------------------
% "Delete File" Button
%----------------------
myimage = imread('./DeleteFileIcon.png');
myIcon = imresize(myimage, [20, 20]);
uipushtool(handles.toolbar, ...
    'TooltipString',    'Delete File',...
    'CData',            myIcon,...
    'Tag',              'pushtool_delfile',...
    'Enable',           'on',...
    'ClickedCallback',  @pushbutton_delete_Callback)
    
   function pushbutton_delete_Callback(~,~)
        
        % As a precaution measure, everytime data is deleted, the user
        % should be questioned
        qst = 'Are you sure you need to delete this information?';
        button = questdlg(qst,'WARNING DELETE','Yes','No','No');
        % No is the default button selected
        if strcmp(button,'Yes')
            DataList = get(handles.listbox_DataSets,'String');
            val=get(handles.listbox_DataSets,'Value');
            DataList(val) ='';
            set(handles.listbox_DataSets,'String',DataList,'Value',1)        
            % all information related to that instance needs to be erased
            %set(handles.edit_date,'String','')
            set(handles.uitable,...
                'Rowname',get(handles.listbox_DataSets,'String'))
            data = get(handles.uitable,'Userdata');%or get(handles.uitable,'Data');
            data(val,:)='';
            set(handles.uitable,'Data',data,'Userdata',data)
        end
        
    end


%--------------------
% "Save Plot" Button
%--------------------
myimage = imread('./SavePlotIcon2.png');
myIcon = imresize(myimage, [20, 20]);
uipushtool(handles.toolbar, ...
    'TooltipString',    'Save Plot',...
    'CData',             myIcon,...
    'Tag',              'pushtool_saveplot',...
    'Enable',           'on',...
    'ClickedCallback',  @pushbutton_SavePlot_Callback)
%----------                                                     ----------%


    % function listbox_DataSets_Callback(hObject, ~)
    %     handles.pushbutton_delete.Enable ='on'; % Get entries in listbox_DataSets  
    %     %DataSetsList = get(handles.listbox_DataSets,'String');
    %     tmp = get(hObject, 'String');
    %     val = get(hObject, 'Value');         
    %     data = get(handles.uitable,'Userdata'); % Get data stored in the Data Details table as "Userdata"
    %     Labels = data(:,3); % Labels for each data set 
    % 
    %     % Plot the selected data set
    %     %cla(handles.axes_Time, 'reset') %reset plot
    %     axes(handles.axes_Time); %Select "Time" axes
    % 
    %     InputData = load(strcat('.\',string(tmp(val,:)),'.m'));
    %     Time = InputData(:, 1);
    %     SR = InputData(:, 2);
    % 
    %     my_color = rand(1,3);
    %     all_marks = {'o','+','*','x','s','d','^','v','>','<','p','h'};
    % 
    %     plot(Time, SR, ...
    %         'LineStyle',    'none', ...
    %         'Marker',       all_marks{mod(val,12)},...
    %         'LineWidth',    2, ...
    %         'Color',        my_color, ...
    %         'MarkerSize',   6, ...
    %         'DisplayName',  string(Labels(val)))
    %     legend('Location',  'northeast')
    %     legend('boxoff')
    %     xlabel('Time (months)')
    %     ylabel('SR (%)')
    %     axis([0 inf 0 100])
    %     title('Clinical Data')   
    % end
%----------                                                     ----------%

%--------------------------------------------------------------------------
% "DATA DETAILS" PANEL
%--------------------------------------------------------------------------
handles.panel_DataDetails = uipanel('Parent',mainFig,...
    'Tag',              'panel_DataDetails',...
    'Title',            'Data Details',...
    'Units',            'Normalized',...
    'Position',         [.01 .62 .38 .30],...
    'HighlightColor',   'm',...
    'ForegroundColor',  'k',...
    'FontSize',         12);

%-----------------------------
% "DATA DETAILS" UITABLE
%-----------------------------
handles.uitable = uitable(handles.panel_DataDetails,...          % the olduitable allows to ToolTip the header
    'Tag',              'uitable',...
    'Data',             TestData,...                                % Data displayed on the table
    'Units',            'normalized', ...
    'Position',         [0.01 0.05 .98 .95],...
    'ColumnEditable',   true,...
    'ColumnFormat',     {'logical' 'char' 'char' 'numeric' 'numeric' 'numeric' 'numeric'},...                                     
    'ColumnName',       {'Select' 'Author' 'Label' 'Nr.  Patients' 'D [Gy]' 'd [Gy/fx]' 'Td [days]'},...
    'RowName',          handles.FileNames,...
    'Userdata',         TestData,...  % Data that can be accesible by the user
    'CellEditCallback', @datauitable_Callback);
    %'ColumnWidth',      85,... % integer number in pixel units  
    %'ColumnToolTip',    {'Select data to perform the fit'...        % Tips when mouse hover
                         % 'The author of the study'...
                         % 'Label on the plot'...
                         % 'Number of patients on the study'...
                         % 'Total prescription dose'...
                         % 'Dose per fraction'...
                         % 'Treatment time'});

    function datauitable_Callback(hObject, event)
        tmp = get(hObject, 'Data');                 % Get data from the table
        indices = event.Indices();                  % Index the edited cell
        input = cell2mat(tmp(indices(1), indices(2))); % Input kecp as a number
        if indices(2)>4
            if ~isnan(input)
                set(hObject, 'Userdata', tmp);
            else 
                prevState = get(hObject, 'Userdata');
                set(hObject, 'Data', prevState)
                msgbox('Input should be a number')
            end
        end
    end


                     
    
%----------                                                     ----------%

%--------------------------------------------------------------------------
% "PLOTS" PANEL
%--------------------------------------------------------------------------
handles.panel_Plot = uipanel('Parent',mainFig,...
    'Tag',              'panel_Plot',...
    'Title',            'Plots',...
    'Units',            'Normalized',...
    'Position',         [.395 .01 .6 .99],...
    'HighlightColor',   'k',...
    'ForegroundColor',  'k',...
    'FontSize',         12);

%---------------------------
% AXES TO PLOT DATA and FIT 
%---------------------------
handles.axes_Time = axes('Parent',handles.panel_Plot,...
    'Units','Normalized','Position',[0.1 0.1 0.4 0.85],...
    'Visible','on');
xlabel('Time (months)'),ylabel('SR (%)'), axis([0 1 0 100]), title(' '), hold on
enableDefaultInteractivity(handles.axes_Time)
 
%-------------------------
% AXES TO PLOT BED
%-------------------------
handles.axes_BED = axes('Parent',handles.panel_Plot,...
    'Units','Normalized','Position',[0.57 0.1 0.4 0.85],...
    'Visible','on');
xlabel('BED (Gy)'),ylabel('SR (%)'), axis([0 1 0 100]), title(' '), hold on
enableDefaultInteractivity(handles.axes_BED)
%----------                                                     ----------% 

%--------------------------------------------------------------------------
% "MODEL OPTIONS" PANNEL
%--------------------------------------------------------------------------
panel_Fit = uipanel('Parent', mainFig, ...
    'Tag',              'panel_Fit', ...
    'Title',            'Model Options', ...
    'Units',            'normalized', ...
    'Position',         [.01 .315 .38 .3],...
    'HighlightColor',   "#EDB120",...
    'ForegroundColor',  'k',...
    'FontSize',         12);

%----------------------------
% FIT1 or FIT2 RADIO BUTTONS
%----------------------------
handles.FitSelection = uibuttongroup('Parent',panel_Fit,...
    'Title',                ' ',...
    'Tag',                  'buttongroup',...
    'FontSize',             10,...
    'FontWeight',           'bold',...
    'Units',                'normalized', ...
    'Position',             [.05 .02 .5 .22],...
    'UserData',             {},...
    'SelectionChangeFcn',   @FitSelection_Callback);

handles.radiobutton_Fit1 = uicontrol(handles.FitSelection,...
    'Tag',                  'radiobutton_Fit1',...
    'Style',                'radiobutton',...
    'String',               'Fit1',......
    'Units',                'Normalized', ...
    'Position',             [.2 .3 .2 .5],...
    'TooltipString',        '<html><center>Select Model 1:<center><br /> SR(d,D,&tau) = exp(-K exp(-[&alpha(1+d/(&alpha/&beta)) D - &gamma T - a(&tau - T))<sup>&delta</sup>])) </html>',...
    'FontSize',             10,...
    'HorizontalAlignment',  'right');

handles.radiobutton_Fit2 = uicontrol(handles.FitSelection,...
    'Tag',                      'radiobutton_Fit2',...
    'Style',                    'radiobutton',...
    'String',                   'Fit2',......
    'Units',                    'Normalized', ...
    'Position',                 [.8 .3 .2 .5],...
    'TooltipString',            '<html>Select Model 2:<br /> SR(d,D,&tau) = 1 - (2&pi)<sup>-1/2</sup> &int<sub>-&infin</sub><sup>t</sup> exp(-x<sup>2</sup>/2) dx <br /> t = (exp(-[&alpha(1+d/(&alpha/&beta))D - &gamma T -(&gamma(&tau - T))<sup>&delta</sup>])-K<sub>50</sub>/K<sub>0</sub>)/(&sigma<sub>k</sub>/K<sub>0</sub>)</html>',...
    'FontSize',                 10,...
    'HorizontalAlignment',      'left');
    
    function FitSelection_Callback(hObject,~)
        tmp = get(hObject, 'SelectedObject');
        if strcmp(tmp.String, 'Fit1')
            set(handles.fit1optionsuitable, 'Visible', 'on');
            set(handles.fiteduitable1,      'Visible', 'on');
            set(handles.fit2optionsuitable, 'Visible', 'off');
            set(handles.fiteduitable2,      'Visible', 'off');
        elseif strcmp(tmp.String, 'Fit2')
            set(handles.fit1optionsuitable, 'Visible', 'off');
            set(handles.fiteduitable1,      'Visible', 'off');
            set(handles.fiteduitable2,      'Visible', 'on');
            set(handles.fit2optionsuitable, 'Visible', 'on');
        Equations; 
        end
    end


%----------------------------
% "MODEL OPTIONS" UITABLE
%----------------------------
handles.fit1optionsuitable = uitable(panel_Fit,...
    'Tag',              'fit1optionsuitable',...
    'ColumnFormat',     {'numeric' 'numeric' 'numeric' 'numeric' 'numeric' 'numeric'},...
    'Data',             ModelOptions1,...
    'Units',            'normalized', ...
    'Position',         [0.01 .25 .99 .745],...
    'Visible',          'on',...
    'ColumnEditable',   true,...
    'ColumnName',       {'K' '<html><center />&alpha<br /> [Gy<sup>-1</sup>]</html>' ...
                         '<html><center />&beta<br />[Gy<sup>-2</sup>]</html>' '<html>&gamma</html>' ...
                         '<html><center />a <br />[mo<sup>-1</sup>]</html>' '<html>&delta</html>'},...
    'RowName',          {'Initial Guess' 'Lower limit' 'Upper limit'},...
    'Userdata',         ModelOptions1,...
    'CellEditCallback', @fitoptionsuitable_Callback);

handles.fit2optionsuitable = uitable(panel_Fit,...
    'Tag',              'fit2optionsuitable',...
    'ColumnFormat',     {'numeric' 'numeric' 'numeric' 'numeric' 'numeric' 'numeric'},...
    'Data',             ModelOptions2,...
    'Units',            'normalized', ...
    'Position',         [0.01 .25 .99 .745],...
    'Visible',          'off',...
    'ColumnEditable',   true,...
    'ColumnName',       {'<html>K<sub>50</sub><span>&#47;</span>K<sub>0</sub></html>'...
                         '<html><center />&alpha<br /> [Gy<sup>-1</sup>]</html>' ...
                         '<html><center />&beta<br />[Gy<sup>-2</sup>]</html>'...
                         '<html>&gamma</html>' ...
                         '<html><center /> &sigma<sub>k</sub> <span>&#47;</span>K<sub>0</sub></html>'...
                         '<html>&delta</html>'},...
    'RowName',          {'Initial Guess' 'Lower limit' 'Upper limit'},...
    'Userdata',         ModelOptions2,...
    'CellEditCallback', @fitoptionsuitable_Callback,...
    'CellSelectionCallback', @CellSelectionCalback);

    function fitoptionsuitable_Callback(hObject,event)
        
        tmp = get(hObject,'Data');        % keep the data from the table somwhere
        input = cell2mat(...
                tmp(event.Indices(1),event.Indices(2))) % The input given by the user is kept as a double
        if ~isnan(input)                                % If the input is other than numeric, it will be passed as
            set(hObject, ...                            % a NaN double; If the input is not a NaN is kept in the table and stored in the Userdata
                'Userdata',tmp);
        else                                            % Otherwise, if the input is NaN
            prevState = get(hObject, 'Userdata');       % Gets the previous state of the table, stored in the Userdata
            set(hObject, ...
                'Data', prevState);                     % Updates the data in the table back to the previous state, before editing

            errordlg('Input must be a number! Use point decimal separator (e.g. 3.14 instead of 3,14). Cientific notation is valid (e.g. 365 = 3.65e2).', 'Input Error')            % Propts what the input must be
        end
     end

    function CellSelectionCalback(hObject, eventdata, handles)

        %msgbox('Done');

    end

%------------------------------------------------
% "PERFORM FIT" BUTON
%------------------------------------------------
handles.pushbutton_fit = uicontrol(panel_Fit,...
    'Tag',              'pushbutton_Fit',...
    'Style',            'pushbutton', ...
    'String',           'Fit',...
    'Units',            'Normalized',...
    'FontSize',         12,...
    'Position',         [.6 .02 .15 .22],...
    'Enable',           'on',...
    'ForegroundColor',  "#A2142F",...
    'BackgroundColor',  '#77AC30',...
    'Tooltipstring',    'Perform fit',...
    'Callback',         @pushbutton_Fit_Callback);

    function pushbutton_Fit_Callback(~,~)

        data = get(handles.uitable,'Userdata');
        state1 = get(handles.fit1optionsuitable, 'Visible');
        state2 = get(handles.fit2optionsuitable, 'Visible');
        DataFiles = strings(0);
        DataSetsList = get(handles.uitable,'RowName');
       
        if isempty(data)
            disp('No data to show')
        else 
            cla(handles.axes_Time, 'reset') %clear axes
            cla(handles.axes_BED, 'reset')
            axes(handles.axes_Time)
            enableDefaultInteractivity(handles.axes_Time)

            Selected = data(:,1);
            for i = 1:numel(Selected)
                if isequal(Selected(i),{1})
                    DataFiles = [DataFiles  strcat(".\",string(DataSetsList(i,:)),".m")];
                    file_names = cellstr(DataFiles);
                end
            end
        if strcmp(state1, 'on')
            Bounds = get(handles.fit1optionsuitable, 'Userdata');
            [K, alpha, beta, gamma, a, Td, delta] = fit1(file_names, data, Bounds);
            FitData = {round(str2double(K),5)...
                       round(str2double(alpha),5)...
                       round(str2double(beta),5)...
                       round(str2double(alpha)/str2double(beta),3)...
                       round(str2double(gamma),5)...
                       round(str2double(a),5)...
                       round(str2double(Td),0)...
                       round(str2double(delta),5)};
            set(handles.fiteduitable1,...
                'Data', FitData,...
                'Userdata', FitData)
            axes(handles.axes_BED);
            enableDefaultInteractivity(handles.axes_BED)

            BED(data);
            %msgbox('Complete!')
        elseif strcmp(state2, 'on')
            Bounds = get(handles.fit2optionsuitable, 'Userdata');
            [K50_K0, alpha, beta, gamma, Td, sigmak_k0, delta] = fit2(file_names, data, Bounds);
            FitData = {RoundStr2Double(K50_K0,3)...
                       RoundStr2Double(alpha,5)...
                       RoundStr2Double(beta,3)...
                       round(str2double(alpha)/str2double(beta),5)...
                       RoundStr2Double(gamma,5)...
                       RoundStr2Double(Td,0)...
                       RoundStr2Double(sigmak_k0,5)...
                       RoundStr2Double(delta,5)};
            set(handles.fiteduitable2,...
                'Data', FitData,...
                'Userdata', FitData)
            axes(handles.axes_BED);
            BED(data);
            %msgbox('Complete!')
        end
        end
    end

%------------------------------------------------
% "CLEAR FIT AXES" BUTON
%------------------------------------------------
handles.pushbutton_ClearFitAxes = uicontrol(panel_Fit,...
    'Tag',              'pushbutton_ClearFitAxes',...
    'Style',            'pushbutton', ...
    'String',           'Clear',...
    'Units',            'Normalized',...
    'Position',         [.8 .02 .15 .22],...
    'Enable',           'on',...
    'ForegroundColor',  "#EDB120",...
    'Tooltipstring',    'Clear "Fited Data" axes',...
    'Callback',         @pushbutton_ClearFitAxes_Callback);

function pushbutton_ClearFitAxes_Callback(~,~)

    cla(handles.axes_Time, 'reset') %reset plot
    axes(handles.axes_Time);
    xlabel('Time (months)')
    ylabel('SR (%)')
    axis([0 inf 0 100])
    title(' ') 
    hold on;
    enableDefaultInteractivity(handles.axes_Time) % intereactive axes

    cla(handles.axes_BED, 'reset') %reset plot
    axes(handles.axes_BED);
    xlabel('BED (Gy)')
    ylabel('SR (%)')
    axis([0 inf 0 100])
    title(' ') 
    hold on;
    enableDefaultInteractivity(handles.axes_BED) % intereactive axes

end
%----------                                                     ----------%

%--------------------------------------------------------------------------
% "FITED PARAMETERS" PANEL
%--------------------------------------------------------------------------
handles.panel_Fited = uipanel('Parent', mainFig, ...
    'Tag',              'panel_Fited', ...
    'Title',            'Fited Parameters', ...
    'Units',            'normalized', ...
    'Position',         [.01 .01 .38 .30],...
    'HighlightColor',   'r',...
    'ForegroundColor',  'k',...
    'FontSize',         12);

%----------------------------
% "FITED PARAMETERS" UITABLES
%----------------------------
handles.fiteduitable1 = uitable(handles.panel_Fited,...
    'Tag',              'fiteduitable1',...
    'ColumnFormat',     {'' '' '' '' '' '' '' ''},...
    'Data',             FitData,...
    'Units',            'normalized', ...
    'Position',         [0.01 .1 .99 .9],...
    'Visible',          'on',...
    'ColumnEditable',   false,...
    'ColumnName',       {'K' ...
                         '<html><center />&alpha <br /> [Gy<sup>-1</sup>]</html>' ...
                         '<html><center />&beta <br /> [Gy<sup>-2</sup>]</html>' ...
                         '<html>&alpha<span>&#47;</span>&beta<br />[Gy]</html>' ...
                         '<html>&gamma</html>' ...
                         '<html><center>T<sub>d</sub><br />[day]</html>' ...
                         '<html><center />a <br /> [mo<sup>-1</sup>]</html>' ...
                         '<html>&delta</html>'},...
    'RowName',           {'Results' 'More'},...
    'Userdata',          FitData,...
    'CellEditCallback',  @fiteduitable_Callback);


handles.fiteduitable2 = uitable(handles.panel_Fited,...
    'Tag',              'fiteduitable2',...
    'ColumnFormat',     {'char' 'char' 'char' 'char' 'char' 'char' 'char' 'char'},...
    'Data',             FitData,...
    'Units',            'Normalized', ...
    'Position',         [0.01 .3 .99 .7],...
    'Visible',          'off',...
    'ColumnEditable',   false,...
    'ColumnName',       {'<html>K<sub>50</sub><span>&#47;</span>K<sub>0</sub></html>' ...
                         '<html><center />&alpha<br /> [Gy<sup>-1</sup>]</html>' ...
                         '<html><center />&beta<br />[Gy<sup>-2</sup>]</html>' ...
                         '<html>&alpha<span>&#47;</span>&beta<br />[Gy]</html>' ...
                         '<html>&gamma</html>' ...
                         '<html><center>T<sub>d</sub><br />[day]</html>' ...
                         '<html><center /> &sigma<sub>k</sub> <span>&#47;</span>K<sub>0</sub></html>' ...
                         '<html>&delta</html>'},...
    'RowName',           {'Results'},...
    'Userdata',          FitData,...
    'CellEditCallback',  @fiteduitable_Callback);

    function fiteduitable_Callback(~,~)
    end

%-----------------------------------
% "FITED PARAMETERS" SAVE PLOT BUTTON
%-----------------------------------
% handles.pushbutton_SavePlot = uicontrol(handles.panel_Fited,...
%     'Tag',              'pushbutton_SavePlot',...
%     'Style',            'pushbutton', ...
%     'String',           '<html><center />Save<br /> Plot</html>',...
%     'Units',            'Normalized',...
%     'Position',         [.80 .005 .1 .25],...
%     'Enable',           'on',...
%     'ForegroundColor',  'r',...
%     'Tooltipstring',    'Perform fit',...
%     'Callback',         @pushbutton_SavePlot_Callback);
% 
    function pushbutton_SavePlot_Callback (~,~)

        FileName = inputdlg('Enter file name and extension (.png, .pdf, .jpg, .fig, .m, .jpeg, .svg):');

        fignew = figure('Visible','off'); % Invisible figure
        newAxes = copyobj(handles.axes_BED,fignew); % Copy the appropriate axes
        set(newAxes,'Position',get(groot,'DefaultAxesPosition')); % The original position is copied too, so adjust it.
        set(fignew,'CreateFcn','set(gcbf,''Visible'',''on'')'); % Make it visible upon loading
        saveas(fignew,string(FileName));
        delete(fignew);
    end
%----------%

end %main