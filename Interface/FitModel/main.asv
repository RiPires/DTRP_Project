function main
% HELP: this function launches the RADIANCE: 
%       Radiotherapy Survival Rate Modeling Interface,
%       a GUI (Graphical User Interface) to perform
%       survival rate (SR) modeling by fitting different survival 
%       models to clinical data inputed by the user
%      
% INPUT
%   The function main requires NO INPUT to launch the interface!
%  
%  While runing and interacting with the interface, the user may prompt
% different kinds of inputs, such as: adding new files via the uigetfile
% class, edit contents of uitable objects, type output files' names, etc.
%
% OUTPUT
%  The function main returns NO OUTPUT when launching the interface!
%
%  While runing and interacting with the interface, the user may prompt
% different kinds of outputs, such as: result of fited parameters and
% uncertainties; clinical data, fiting SR over time and over BED plots
% 
% SEE ALSO: uimenu, uitoolbar, uipushtool, uipanel, uicontrol, uigetfile,
%           uibuttongroup, 
% -------------------------------------------------------------------------
% Authors:
% R. Pires
% A. Pardal
% R. Santos
% 
% Last Update: 01/07/2023
% 
% adapted from bcf's teraPro function made in 09-01-2023
% -------------------------------------------------------------------------

%--------------------------------------------------------------------------
% Initialize some variables for demonstration purposes
%--------------------------------------------------------------------------
data = {};
TestData = {true 'Data1.m' 'data1' 128 53.6 4.88 28;...
            true 'Data2.m' 'data2' 35 61.5 1.5 42;...
            true 'Data3.m' 'data3' 83 55 1.8 37;...
            true 'Data4.m' 'data4' 51 45 1.8 37;...
            true 'Data5.m' 'data5' 24 32.5 1.8 37};

ModelOptions1 = {0.042 0.037 0.002587 0.00608 1268 0.16;... % initial guess
                 0 0 0 0 1000 0;...                         % lower limit     
                 0.09 0.05 0.003 0.007 1500 0.30};          % upper limit

ModelOptions2 = {2.03 0.010 0.000666 0.00542 0.65 0.20;...
                 1.99 0.009 0.000647 0.00495 0.59 0.19;...
                 2.07 0.011 0.000692 0.00598 0.71 0.21};
FitData = {};                                               % needed to initialize uitable_ResultFit
UncertaintyData = {};
handles.FileNames = {'Data1' 'Data2' 'Data3' 'Data4' 'Data5'};
%----------                                                     ----------%

%--------------------------------------------------------------------------
% MAIN FIGURE
%--------------------------------------------------------------------------
mainFig = figure(1);
set(mainFig ,'Name','RADIANCE: Radiotherapy Survival Rate Modeling Interface',...
    'NumberTitle','off',...
    'WindowState', 'maximized',...                  % Maximize window by default
    'KeyPressFcn',@figure_keyPressFcn,...           % What happens when certain keys are pressed on the keyboard
    'MenuBar','None');
clf,                                                % clear the figure

    function figure_keyPressFcn(hObject,eventdata)
               %%%   !!!   TO DO   !!!   %%% 
        switch eventdata.Key
            case 'return'
                pushbutton_Fit_Callback() 
            case 'escape'
                ClearAxes()       
        end
    end
%----------                                                     ----------%

%--------------------------------------------------------------------------
% CIENCIAS LOGO
%--------------------------------------------------------------------------
[tmp,~,alfa] = imread('ciencias_ul_azul_h_s-ass.png');

handles.axes_logo = axes('Parent',mainFig,...
                         'Units','Normalized', ...
                         'Position',[0.08 0.93 0.14 0.07],...
                         'Visible','off');
tmp=image(tmp);
set(tmp, 'AlphaData', alfa);
axis equal off
%--------------------------------------------------------------------------
% INTERFACE LOGO
%--------------------------------------------------------------------------                                                   ----------%
[tmp,~,alfa] = imread('logo.png');

handles.axes_logo = axes('Parent',mainFig,...
                         'Units','Normalized', ...
                         'Position',[0.001 0.93 0.11 0.07],...
                         'Visible','off');
tmp=image(tmp);
set(tmp, 'AlphaData', alfa);
axis equal off

%--------------------------------------------------------------------------
% TEXT AREA
%--------------------------------------------------------------------------
dim = [.2 .78 .1 .21]; 
str = {'RADIANCE_v1.0.0'
       'github.com/RiPires/DTRP_Project.git'};
annotation('textbox',dim,'String',str,'FitBoxToText','on', 'Interpreter', 'none');
%----------                                                     ----------%

%--------------------------------------------------------------------------
% MENU
%--------------------------------------------------------------------------
%%%   !!!   TO DO   !!!   %%% 

%-----------
% FILE
%-----------
handles.uimenu_file = uimenu(mainFig, ... 
        	                'Label','File');

    handles.uimenu_newFile = uimenu(handles.uimenu_file,...
                                   'Label','Add Files...',...
                                   'Callback',@AddFile_CB);

    handles.uimenu_delFile = uimenu(handles.uimenu_file,...
                                   'Label','Delete Files...',...
                                   'Callback',@Del_CB);
    
    handles.uimenu_saveFile = uimenu(handles.uimenu_file,...
                                    'Label','Open...',...
                                    'Separator','on',...
                                    'Callback',@uimenu_open_callback);

    handles.uimenu_saveFile = uimenu(handles.uimenu_file,...
                                    'Label','Save...',...
                                    'Separator','off',...
                                    'Callback',@uimenu_save_callback);
        
        function uimenu_open_callback(~,~)        
            uiopen('*.mat')             % Search for .mat files
        end
    
        function uimenu_save_callback(~,~)        
            uisave('ProgramState.mat')  % Suggested filename
        end

%-----------
% FIT
%-----------
handles.uimenu_fit = uimenu(mainFig, ...
        	                'Label', 'Fit');

    handles.uimenu_model = uimenu(handles.uimenu_fit,...
                                  'Label', 'Select Model');

        handles.uimenu_fit1 = uimenu(handles.uimenu_model,...
                                     'Label',   'Fit1',...
                                     'Callback', @uimenu_fit1_callback);

            function uimenu_fit1_callback(~,~)
                handles.radiobutton_Fit1.Value = 1;
            end

        handles.uimenu_fit2 = uimenu(handles.uimenu_model,...
                                     'Label',     'Fit2',...
                                     'Callback',  @uimenu_fit2_callback);

            function uimenu_fit2_callback(~,~)
                handles.radiobutton_Fit2.Value = 1;
            end

    handles.uimenu_dofit = uimenu(handles.uimenu_fit,...
                                  'Label',      'Perform Fit',...
                                  'Callback',   @pushbutton_Fit_Callback);

    handles.uimenu_saveresults = uimenu(handles.uimenu_fit,...
                              'Label',      'Save Results',...
                              'Callback',   @SaveResults_Callback);

        function SaveResults_Callback(~,~)
            SelectedFit = get(handles.uitable_ResultFit1, 'Visible');       % Checks selected model      
            if strcmp(SelectedFit, 'on')                                    % If Fit1 is selected
                Results = cell2table(get(handles.uitable_ResultFit1, 'Userdata'));
                Results.Properties.VariableNames = ...
                ["K", "alpha [Gy^-1]", "beta [Gy^-2]", "alpha/beta [Gy]", "gamma", "Td [day]", "a [mon^-1]", "delta"];
            elseif strcmp(SelectedFit, 'off')                               % If Fit2 is selected
                Results = cell2table(get(handles.uitable_ResultFit2, 'Userdata'));
                Results.Properties.VariableNames = ...
                ["K50/K0", "alpha [Gy^-1]", "beta [Gy^-2]", "alpha/beta [Gy]", "gamma", "Td [day]", "sigma_k/K0", "delta"];
            end
            FileName = inputdlg('Enter file name and extension (.m, .txt, .csv):');
            writetable(Results, string(FileName));                          % write file
        end
%-----------
% PLOT
%-----------
handles.uimenu_plot = uimenu(mainFig, ...
        	                 'Label', 'Plot');
    handles.uimenu_clr = uimenu(handles.uimenu_plot,...
                                'Label',    'Clear axes',...
                                'Callback', @ClearAxes);
    
    handles.uimenu_pltdata = uimenu(handles.uimenu_plot,...
                                    'Label',    'Plot selected clinical data',...
                                    'Callback', @PltData);

    handles.uimenu_save = uimenu(handles.uimenu_plot,...
                                 'Label',    'Save',...
                                 'Callback', @SavePlot);
%-----------
% HELP
%-----------
handles.uimenu_hp = uimenu(mainFig, ...
        	                'Label', 'Help',...
                            'Callback', @Help_Callback);

    function Help_Callback(~,~)
        open("RADIANCE-Guide_v1.pdf")
    end
%----------                                                     ----------%

%--------------------------------------------------------------------------
% TOOLBAR
%--------------------------------------------------------------------------
handles.toolbar=uitoolbar(mainFig);

%-------------------
% "Add File" Button
%-------------------
myimage = imread('./AddFileIcon.png');
myIcon = imresize(myimage, [20, 20]);
uipushtool(handles.toolbar, ...
           'TooltipString',    'Add File',...
           'CData',             myIcon,...
           'Tag',              'pushtool_addfile',...
           'Enable',           'on',...
           'ClickedCallback',  @AddFile_CB)

    function AddFile_CB(~,~)       
        data = get(handles.uitable,'Userdata');             % Get data from the Data Details table
        FileList = get(handles.uitable,'RowName');          % The names of the files are stored in the RowName
        n=numel(FileList); 
        files = uigetfile('*', ...                          % GUI that allows to select multiple files
                          'Select one or more files to import', ...
                          'MultiSelect','on');             
        if ischar(files)                                    % If only one file is selected, "files" is a char vector
            FileNames = strsplit(files, '.');               % gets file name without extension
            FileNames = string(FileNames{1});
            
        else                                                % If multiple files are selected
            FileNames = [];
            for k = 1:numel(files)                          % for each one    
                File = strsplit(files{k}, '.');             % gets file name without extension
                File = string(File{1});
                FileNames = [FileNames;File];               % stack it to "FileNames" array
            end
        end

        if isempty(data)                                    % If there is no data yet in the list or all was deleted
            set(handles.uitable,...                         % just paste "FileNames" in the "RowName"
                'RowName',   FileNames)                     
        else                                                % If there was already data
            FileList = [FileList;FileNames];                % stack the new FileNames to the pre-existing FileList  
            set(handles.uitable, ...                        % and past it to the "RowName"
                'RowName',FileList)                                                         
        end

        data(size(data,1)+numel(FileNames),:) = cell(1,7);  % Add as many extra rows as the nr of files imported
        set(handles.uitable, ...                            % to the "Userdata" and "Data" properties of the table
        'Data',     data, ...
        'Userdata', data);                                  % Update them
    end

%----------------------
% "Delete File" Button
%----------------------
myimage = imread('./DeleteFileIcon.png');
myIcon = imresize(myimage, [20, 20]);
uipushtool(handles.toolbar, ...
    'TooltipString',    'Delete unselected files',...
    'CData',            myIcon,...
    'Tag',              'pushtool_delfile',...
    'Enable',           'on',...
    'ClickedCallback',  @Del_CB)
    
   function Del_CB(~,~)
       
        qst = 'Are you sure you want to delete the unselected data?'; % As a precaution measure, everytime data is deleted, the user should be questioned
        button = questdlg(qst,'WARNING DELETE','Yes','No','No');   % No is the default button selected
        
        if strcmp(button,'Yes')

            FileNames = get(handles.uitable, 'Rowname'); % Gets file names in the row header
            data = get(handles.uitable,'Userdata');      % Gets Userdata in the table
            select = cell2mat(data(:,1));                % Gets selection status of the data
            n = numel(data(:,1));
            for k=n:-1:1                                 % Starting from the end of the table, otherwise we'll have problems with the indexing
                if select(k) == 0                        % If the selection state is OFF             
                    data(k,:) = '';                      % Clears the information on this row
                    FileNames(k) = '';                   % And also the row header
                end
            end
            set(handles.uitable, ...                     % In the end sets
                'Data',data, ...                         % updated displayed data
                'Userdata',data, ...                     % userdata
                'Rowname',FileNames)                     % and headers
        end
        
    end

%---------------------
% "Save Plot" Button
%---------------------
myimage = imread('./SavePlotIcon.png');
myIcon = imresize(myimage, [20, 20]);
uipushtool(handles.toolbar, ...
    'TooltipString',    'Save Plot',...
    'CData',             myIcon,...
    'Tag',              'pushtool_saveplottime',...
    'Enable',           'on',...
    'ClickedCallback',  @SavePlot)

%---------------------
% "Clear Axes" Button
%---------------------
myimage = imread('./ClearPlotIcon.jpg');
myIcon = imresize(myimage, [20, 20]);
uipushtool(handles.toolbar, ...
    'TooltipString',    'Clear Axes',...
    'CData',             myIcon,...
    'Tag',              'pushtool_clearaxes',...
    'Enable',           'on',...
    'ClickedCallback',  @ClearAxes)

%----------                                                     ----------%

%--------------------------------------------------------------------------
% "DATA DETAILS" PANEL
%--------------------------------------------------------------------------
handles.panel_DataDetails = uipanel('Parent',mainFig,...   
    'Tag',              'panel_DataDetails',...
    'Title',            'Data Details',...
    'Units',            'Normalized',...
    'Position',         [.01 .62 .38 .30],...
    'HighlightColor',   'm',...
    'ForegroundColor',  'k',...
    'FontSize',         12);

%-----------------------------
% "DATA DETAILS" UITABLE
%-----------------------------
handles.uitable = uitable(handles.panel_DataDetails,...        
    'Tag',              'uitable',...
    'Data',             TestData,...                    % Data displayed on the table
    'Units',            'normalized', ...
    'Position',         [0.01 0.05 .98 .95],...
    'ColumnEditable',   true,...
    'ColumnWidth',      {70 70 70 70 70 70 70 70},...
    'ColumnFormat',     {'logical' 'char' 'char' 'numeric' 'numeric' 'numeric' 'numeric'},...                                     
    'ColumnName',       {'Select' 'Author' 'Label' 'Nr. Patients' 'D [Gy]' 'd [Gy/fx]' 'T [days]'},...
    'Tooltip',          {['<html>Select: data to fit<br />' ...
                          'Author: of the study<br /> ' ...
                          'Label: to be used in the plot<br />' ...
                          'Nr. Patients: total number of patients in the study<br /> ' ...
                          'D: total prescription dose in grey<br /> ' ...
                          'd: dose administrated in each fraction in grey per fraction<br />' ...
                          'T: total treatment time in days </html>']},...
    'RowName',          handles.FileNames,...
    'Userdata',         TestData,...                    % Data that can be accesible by the user
    'CellEditCallback', @datauitable_Callback);

    function datauitable_Callback(hObject, event)
        tmp = get(hObject, 'Data');                     % Get data from the table
        indices = event.Indices();                      % Index the edited cell
        input = cell2mat(tmp(indices(1), indices(2)));  % Input kept as a number

        if indices(2) > 3                                 % If a cell in columns 4, 5, 6 or 7 changes 
            if ~isnan(input)                            % check if it's not NaN 
                if (indices(2) == 4 || indices(2) == 7)... % If a cell in columns 4 or 7 changes
                    && rem(2*input,2) ~=0                  % and it's not integer                           
                    warndlg(['Are you sure this is the correct input? ' ...
                             'Tipicaly, the number of patients in the study,' ...
                             ' and the total treament time are positive, ' ...
                             'non-zero, integer values.'], 'Input Warning')
                elseif (indices(2) == 4 || indices(2) == 5 ||... % If a cell in the columns 4, 5,
                    indices(2) == 6 || indices(2) == 7)...   % 6 or 7 changes
                    && input <= 0                            % and it's not positive
                    
                    prevState = get(hObject, 'Userdata');   % gets previous state of the table stored in the Userdata
                    set(hObject, 'Data', prevState)         % updates the data in the table back to the previous state, before editing
                    errordlg(['Number of patients in the study,' ...
                              ' total prescription dose, ' ...
                              'dose per fraction and ' ...
                              'total treatment time should be ' ...
                              'positive, non-zero values.'], 'Invalid Input')
                else 
                    set(hObject, 'Userdata', tmp);          % keeps Data in the table and updates Userdata
                end
            else                                        % If input is NaN
                prevState = get(hObject, 'Userdata');   % gets previous state of the table stored in the Userdata
                set(hObject, 'Data', prevState)         % updates the data in the table back to the previous state, before editing
                errordlg(['Input must be a number!' ...      % Propts what the input must be
                          'Use point decimal separator (e.g. 3.14 instead of 3,14).' ...
                          'Cientific notation is valid (e.g. 314 = 3.14e2). ' ...
                          'Number of patients in the study, total prescription dose, ' ...
                          'dose per fraction and total treatment time' ...
                          ' should be positive, non-zero values.'], 'Invalid Input') 
            end
        elseif indices(2) <= 3                          % If a cell in column 1, 2 or 3 changes (Selection state, Author and label)
            set(hObject, 'Userdata', tmp);              % updates Userdata
        end
    end
    

%----------                                                     ----------%

%--------------------------------------------------------------------------
% "PLOTS" PANEL
%--------------------------------------------------------------------------
handles.panel_Plot = uipanel('Parent',mainFig,...
    'Tag',              'panel_Plot',...
    'Title',            'Plots',...
    'Units',            'Normalized',...
    'Position',         [.395 .01 .6 .99],...
    'HighlightColor',   'k',...
    'ForegroundColor',  'k',...
    'FontSize',         12);

%---------------------------
% AXES TO PLOT DATA and FIT 
%---------------------------
handles.axes_Time = axes('Parent',handles.panel_Plot,...
    'Units','Normalized','Position',[0.1 0.1 0.4 0.85],...
    'Visible','on');
xlabel('Time (months)'),...
ylabel('SR (%)'),...
axis([0 1 0 100]),...
title(' '),...
hold on
enableDefaultInteractivity(handles.axes_Time)
 
%-------------------------
% AXES TO PLOT BED
%-------------------------
handles.axes_BED = axes('Parent',handles.panel_Plot,...
    'Units','Normalized','Position',[0.57 0.1 0.4 0.85],...
    'Visible','on');
xlabel('BED (Gy)'),...
ylabel('SR (%)'),...
axis([0 1 0 100]),...
title(' '),...
hold on
enableDefaultInteractivity(handles.axes_BED)
%----------                                                     ----------% 

%--------------------------------------------------------------------------
% "MODEL OPTIONS" PANNEL
%--------------------------------------------------------------------------
panel_ModelOpt = uipanel('Parent', mainFig, ...
    'Tag',              'panel_ModelOpt', ...
    'Title',            'Model Options', ...
    'Units',            'normalized', ...
    'Position',         [.01 .315 .38 .3],...
    'HighlightColor',   "#EDB120",...
    'ForegroundColor',  'k',...
    'FontSize',         12);

%----------------------------
% FIT1 or FIT2 RADIO BUTTONS
%----------------------------
handles.SelectModel = uibuttongroup('Parent',panel_ModelOpt,...
    'Title',                ' ',...
    'Tag',                  'buttongroup',...
    'FontSize',             10,...
    'FontWeight',           'bold',...
    'Units',                'normalized', ...
    'Position',             [.05 .02 .5 .22],...
    'UserData',             {},...
    'SelectionChangeFcn',   @SelectModel_Callback);

handles.radiobutton_Fit1 = uicontrol(handles.SelectModel,...
    'Tag',                  'radiobutton_Fit1',...
    'Style',                'radiobutton',...
    'String',               'Fit1',......
    'Units',                'Normalized', ...
    'Position',             [.2 .3 .2 .5],...
    'FontSize',             10,...
    'HorizontalAlignment',  'right',...
    'TooltipString',        ['<html><center>Select Model 1:<br />' ...
                             'SR(d,D,&tau) = exp(-K exp(-[&alpha(1+d/(&alpha/&beta)) D - &gamma T - a(&tau - T))<sup>&delta</sup>]))<br />' ...
                             ' </center> <br />' ...
                             'SR: Survival Rate in percentage (%) <br />' ...
                             '&tau: enlapsed time from the beggining of the treatment (months) <br />' ...
                             '&gamma = ln2/T<sub>d</sub>, &alpha and &beta characterize the intrinsic radiosensitivity of cells <br />' ...
                             'T<sub>d</sub>: potential doubling time <br />' ...
                             'K, a and &delta are the remaining fitting parameters. </html>']);

handles.radiobutton_Fit2 = uicontrol(handles.SelectModel,...
    'Tag',                      'radiobutton_Fit2',...
    'Style',                    'radiobutton',...
    'String',                   'Fit2',......
    'Units',                    'Normalized', ...
    'Position',                 [.8 .3 .2 .5],...
    'FontSize',                 10,...
    'HorizontalAlignment',      'left',...
    'TooltipString',            ['<html><center>Select Model 2:<br /> ' ...
                                 'SR(d,D,&tau) = 1 - (2&pi)<sup>-1/2</sup> &int<sub>-&infin</sub><sup>t</sup> exp(-x<sup>2</sup>/2) dx <br /> ' ...
                                 't = (exp(-[&alpha(1+d/(&alpha/&beta))D - &gamma T -(&gamma(&tau - T))<sup>&delta</sup>])-K<sub>50</sub>/K<sub>0</sub>)/(&sigma<sub>k</sub>/K<sub>0</sub>) <br /> ' ...
                                 '</center> <br />' ...
                                 'SR: Survival Rate in percentage (%) <br /> ' ...
                                 '&tau: enlapsed time from the beggining of the treatment (months) <br /> ' ...
                                 't = (K - K<sub>50</sub>)/&sigma<sub>k</sub> <br />' ...
                                 'K<sub>50</sub> is the critical number of tumour clonogens corresponding to death in 50 % patients <br />' ...
                                 '&sigma<sub>k</sub> is the gaussian width for the distribution of critical clonogen numbers <br />' ...
                                 'Dependence of tumor cells on D, d, T and &tau is given by the following LQ inspired model: <br />' ...
                                 'K = K<sub>50</sub> exp(-[&alpha(1+d/(&alpha/&beta))D - &gamma T -(&gamma(&tau - T))<sup>&delta</sup>]) <br />' ...
                                 '(&gamma(&tau - T))<sup>&delta</sup> characterizes the time dependence of tumor regrowth after completions of RT. </html>']);
 
    function SelectModel_Callback(hObject,~)
        tmp = get(hObject, 'SelectedObject');                       
        if strcmp(tmp.String, 'Fit1')
            set(handles.uitable_OptFit1,    'Visible', 'on');
            set(handles.uitable_ResultFit1, 'Visible', 'on');
            set(handles.uitable_OptFit2,    'Visible', 'off');
            set(handles.uitable_ResultFit2, 'Visible', 'off');
        elseif strcmp(tmp.String, 'Fit2')
            set(handles.uitable_OptFit1,    'Visible', 'off');
            set(handles.uitable_ResultFit1, 'Visible', 'off');
            set(handles.uitable_ResultFit2, 'Visible', 'on');
            set(handles.uitable_OptFit2,    'Visible', 'on');
        end
    end

%----------------------------
% "MODEL OPTIONS" UITABLE
%----------------------------
handles.uitable_OptFit1 = uitable(panel_ModelOpt,...
    'Tag',              'uitable_OptFit1',...
    'ColumnFormat',     {'numeric' 'numeric' 'numeric' 'numeric' 'numeric' 'numeric'},...
    'Data',             ModelOptions1,...
    'Units',            'normalized', ...
    'Position',         [0.01 .25 .99 .745],...
    'Visible',          'on',...
    'ColumnEditable',   true,...
    'ColumnWidth',      {65 65 65 65 65 65 65 65},...
    'ColumnName',       {'K'...
                        '<html><center />&alpha<br /> [Gy<sup>-1</sup>]</html>' ...
                        '<html><center />&beta<br />[Gy<sup>-2</sup>]</html>' ...
                        '<html><center>&gamma <br /> [days<sup>-1</sup>]</center></html>' ...
                        '<html><center />a <br />[mo<sup>-1</sup>]</html>' '<html>&delta</html>'},...
    'RowName',          {'Initial Guess' 'Lower limit' 'Upper limit'},...
    'Userdata',         ModelOptions1,...
    'Tooltip',          {['<html><center> Define options to perform the fit </center><br />' ...
                          'Initial guess: an apropriate guess for each parameter, based on the radiobiological expertise of the user. <br />' ...
                          'Lower limit: lower bound of a range to serach for the fited parameter. <br />' ...
                          'Upper limit: upper bound of a range to serach for the fited parameter. <br />' ...
                          '<br />'...
                          'NOTES: <br />' ...
                          '- the initial guess should be inside the lower to upper limits range; <br />' ...
                          '- the wider the range, the more probable is that the algorithm will not converge to an optimal solution, or will converge at all; <br />' ...
                          '- these are the default values used to estimate the parameters for a liver irradiation; </html>']},... 
    'CellEditCallback', @fitoptionsuitable_Callback);

handles.uitable_OptFit2 = uitable(panel_ModelOpt,...
    'Tag',              'uitable_OptFit2',...
    'ColumnFormat',     {'numeric' 'numeric' 'numeric' 'numeric' 'numeric' 'numeric'},...
    'Data',             ModelOptions2,...
    'Units',            'normalized', ...
    'Position',         [0.01 .25 .99 .745],...
    'Visible',          'off',...
    'ColumnEditable',   true,...
    'ColumnWidth',      {65 65 65 65 65 65 65 65},...
    'ColumnName',       {'<html>K<sub>50</sub><span>&#47;</span>K<sub>0</sub></html>'...
                         '<html><center />&alpha<br /> [Gy<sup>-1</sup>]</html>' ...
                         '<html><center />&beta<br />[Gy<sup>-2</sup>]</html>'...
                         '<html><center>&gamma <br /> [day<sup>-1</sup>]</center></html>' ...
                         '<html><center /> &sigma<sub>k</sub> <span>&#47;</span>K<sub>0</sub></html>'...
                         '<html>&delta</html>'},...
    'RowName',          {'Initial Guess' 'Lower limit' 'Upper limit'},...
    'Userdata',         ModelOptions2,...
    'Tooltip',          {['<html><center> Define options to perform the fit </center><br />' ...
                          'Initial guess: an apropriate guess for each parameter, based on the radiobiological expertise of the user. <br />' ...
                          'Lower limit: lower bound of a range to serach for the fited parameter. <br />' ...
                          'Upper limit: upper bound of a range to serach for the fited parameter. <br />' ...
                          '<br />'...
                          'NOTES: <br />' ...
                          '- the initial guess should be inside the lower to upper limits range; <br />' ...
                          '- the wider the range, the more probable is that the algorithm will not converge to an optimal solution, or will converge at all; <br />' ...
                          '- these are the default values used to estimate the parameters for a liver irradiation; </html>']},...
    'CellEditCallback', @fitoptionsuitable_Callback);

    function fitoptionsuitable_Callback(hObject,event)        
        tmp = get(hObject,'Data');                       % keep the data from the table somwhere
        input = cell2mat(...
        tmp(event.Indices(1),event.Indices(2)));         % The input given by the user is kept as a double
                                                         % If the input is other than numeric, it will be passed as
                                                         % a NaN double;
        if ~isnan(input)                                 % In the case it's a number                               
                                                         
            if input <0                                  % Check if it's negative
                prevState = get(hObject, 'Userdata');    % Gets the previous state of the table, stored in the Userdata
                set(hObject, ...
                    'Data', prevState);                  % Updates the data in the table back to the previous state, before editing
                errordlg(['These parameters are positive, non-zero values. '...
                          'Use point decimal separator (e.g. 3.14 instead of 3,14). ' ...
                          'Cientific notation is valid (e.g. 314 = 3.14e2).'], 'Invalid Input')
                                                         
                                                         % And check if it's not zero in the case 
            elseif input == 0 && event.Indices(1) ~= 2   % the change is on rows 1 or 3 (initial guess and upper limit)
                warndlg(['Are you sure this is the correct input? '...
                         'Tipicaly these parameters are positive, non-zero values. '...
                         'Use point decimal separator (e.g. 3.14 instead of 3,14). ' ...
                         'Cientific notation is valid (e.g. 314 = 3.14e2).'], 'Input Warning')
            end

        set(hObject, ...                                 % If the input is not a NaN, and fullfill the previous conditions                          
            'Userdata',tmp);                             % then it's kept on the table and stored in the Userdata                            
            
        else                                             % Otherwise, if the input is NaN
            prevState = get(hObject, 'Userdata');        % Gets the previous state of the table, stored in the Userdata
            set(hObject, ...
                'Data', prevState);                      % Updates the data in the table back to the previous state, before editing
            errordlg(['Input must be a number! ' ...     % Tells what the input must be
                      'Tipicaly these parameters are positive, non-zero values.'...
                      'Use point decimal separator (e.g. 3.14 instead of 3,14). ' ...
                      'Cientific notation is valid (e.g. 314 = 3.14e2).'], 'Invalid Input')            
        end
     end


%------------------------------------------------
% "PERFORM FIT" BUTON
%------------------------------------------------
handles.pushbutton_Fit = uicontrol(panel_ModelOpt,...
    'Tag',              'pushbutton_Fit',...
    'Style',            'pushbutton', ...
    'String',           'Perform Fit',...
    'Units',            'Normalized',...
    'FontSize',         12,...
    'Position',         [.6 .02 .30 .22],...
    'Enable',           'on',...
    'ForegroundColor',  "#A2142F",...
    'BackgroundColor',  '#77AC30',...
    'Tooltipstring',    'Perform fit for the selected files',...
    'Callback',         @pushbutton_Fit_Callback);

    function pushbutton_Fit_Callback(~,~)
        data = get(handles.uitable,'Userdata');              % Gets "Userdata" from Data Details table
        state1 = get(handles.uitable_OptFit1, 'Visible'); % State of button Fit1 (On or Off)
        state2 = get(handles.uitable_OptFit2, 'Visible'); % State of button Fit2 (On or Off)
        DataFiles = strings(0);
        DataSetsList = get(handles.uitable,'RowName');
       
        %%%   !!!   ERROR MESSAGE WHEN EMPTY   !!!   %%%

        cellstate = cellfun(@isempty,data);                  % logical value 1 if cells are empty

        if isempty(data)                                     % If the table is empty
            helpdlg('No data to perform fit!','')            % nothing to display
        
        elseif any(cellstate(:,4)) || any(cellstate(:,5)) || ... % Check if there are any empty cells
               any(cellstate(:,6)) || any(cellstate(:,7))        % in columns N, D, d and T
                      
            errordlg(['Input must be a number!' ...              % Propts what the input must be
                      'Use point decimal separator (e.g. 3.14 instead of 3,14).' ...
                      'Cientific notation is valid (e.g. 314 = 3.14e2). ' ...
                      'Number of patients in the study, total prescription dose, ' ...
                      'dose per fraction and total treatment time should be positive, non-zero values.'], 'Invalid Input') 

        else                                                 % If the table contains data
            cla(handles.axes_Time, 'reset')                  % clear both axes
            cla(handles.axes_BED, 'reset')
            axes(handles.axes_Time)                          % Select axes_Time
            enableDefaultInteractivity(handles.axes_Time)    % Enable its interactivity

            Selected = data(:,1);                                                           % Selection state of the data
            for i = 1:numel(Selected)                       
                if isequal(Selected(i),{1})                                                 % If it's selected
                    DataFiles = [DataFiles  strcat("./",string(DataSetsList(i,:)),".m")];   % Complete the file names with the extension
                    file_names = cellstr(DataFiles);
                end
            end
        end
        if strcmp(state1, 'on')                                                     % If Fit1 model it's selected

            Bounds = get(handles.uitable_OptFit1, 'Userdata');                      % Check initial guess, upper and lower bounds to perform the fit
            [p,up,gf] = fit1(file_names, data, Bounds);                             % Performs Fit1 (p->vector with parameters; up->vector with uncertainties)
            FitData = {round(p(1),5)...                                             % Stores fited parameters
                       ,round(p(2),5)...
                       ,round(p(3),5)...
                       ,round(p(4),5)...
                       ,round(p(5),5)...
                       ,round(p(6),0)...
                       ,round(p(7),5)...
                       ,round(p(8),5)...
                       ,round(gf,2)}
            UncertaintyData = {round(up(1),5)...                                    % Stores uncertainties of the parameters                     
                       ,round(up(2),5)...
                       ,round(up(3),5)...
                       ,round(up(4),5)...
                       ,round(up(5),5)...
                       ,round(up(6),0)...
                       ,round(up(7),5)...
                       ,round(up(8),5),
                       }

            Results = [FitData; UncertaintyData; UncertaintyData]           
            set(handles.uitable_ResultFit1,...                                      % Keep fited parameters information
                'Data', Results,...                                                 % and displays it on the table
                'Userdata', Results)

            axes(handles.axes_BED);                                                 % Now selects axes_BED
            enableDefaultInteractivity(handles.axes_BED)                            % enables its interactivity
            BED(file_names,data,p,1);                                               % Performs BED calculation (1 is the number of the fit)
            %msgbox('Complete!')

        elseif strcmp(state2, 'on')                                                 % If Fit2 model is selected

            Bounds = get(handles.uitable_OptFit2, 'Userdata');                      % Check initial guess, upper and lower bounds to perform the fit
            [p,up,gf] = fit2(file_names, data, Bounds);                             % Performs Fit2
            FitData = {round(p(1),5)...                                             % Stores fited parameters and their uncertainties
                       ,round(p(2),5)...
                       ,round(p(3),5)...
                       ,round(p(4),5)...
                       ,round(p(5),5)...
                       ,round(p(6),0)...
                       ,round(p(7),5)...
                       ,round(p(8),5)...
                       ,round(gf,2)};
            UncertaintyData = {round(up(1),5)...                                    % Stores uncertainties of the parameters                           
                       ,round(up(2),5)...
                       ,round(up(3),5)...
                       ,round(up(4),5)...
                       ,round(up(5),5)...
                       ,round(up(6),0)...
                       ,round(up(7),5)...
                       ,round(up(8),5)};

            Results = [FitData; UncertaintyData; UncertaintyData]           
            set(handles.uitable_ResultFit2,...                                      % Keep fited parameters information
                'Data', Results,...                                                 % and displays it on the table
                'Userdata', Results)

            axes(handles.axes_BED);                                                 % Selects axes_BED
            enableDefaultInteractivity(handles.axes_BED)                            % enables its interactivity
            BED(file_names,data,p,2);                                               % Performs BED calculation (2 is the number of the fit)
            %msgbox('Complete!')
        end
    end
%----------                                                     ----------%

%--------------------------------------------------------------------------
% "Results" PANEL
%--------------------------------------------------------------------------
handles.panel_Results = uipanel('Parent', mainFig, ...
    'Tag',              'panel_Results', ...
    'Title',            'Results', ...
    'Units',            'normalized', ...
    'Position',         [.01 .01 .38 .30],...
    'HighlightColor',   'r',...
    'ForegroundColor',  'k',...
    'FontSize',         12);

%----------------------------
% "Results" UITABLES
%----------------------------
handles.uitable_ResultFit1 = uitable(handles.panel_Results,...
    'Tag',              'uitable_ResultFit1',...
    'ColumnFormat',     {'' '' '' '' '' '' '' '' ''},...
    'Data',             FitData,...
    'Units',            'normalized', ...
    'Position',         [0.01 .1 .99 .9],...
    'Visible',          'on',...
    'ColumnEditable',   false,...
    'ColumnWidth',      {65 65 65 65 65 65 65 65 65},...
    'ColumnName',       {'K' ...
                         '<html><center />&alpha <br /> [Gy<sup>-1</sup>]</html>' ...
                         '<html><center />&beta <br /> [Gy<sup>-2</sup>]</html>' ...
                         '<html>&alpha<span>&#47;</span>&beta<br />[Gy]</html>' ...
                         '<html><center>&gamma <br /> [day<sup>-1</sup>]</center></html>' ...
                         '<html><center>T<sub>d</sub><br />[day]</html>' ...
                         '<html><center />a <br /> [mo<sup>-1</sup>]</html>' ...
                         '<html>&delta</html>'...
                         '<html>&chi<sup>2</sup><span>&#47;</span>dof<br /></html>'},...
    'RowName',           {'Results' 'Lower uncty.' 'Upper uncty.'},...
    'Userdata',          FitData,...
    'Tooltip',           {'Results of the fited parameters with lower and upper bound uncertainties.'},...
    'CellEditCallback',  @fiteduitable_Callback);


handles.uitable_ResultFit2 = uitable(handles.panel_Results,...
    'Tag',              'uitable_ResultFit2',...
    'ColumnFormat',     {'char' 'char' 'char' 'char' 'char' 'char' 'char' 'char' 'char'},...
    'Data',             FitData,...
    'Units',            'Normalized', ...
    'Position',         [0.01 .1 .99 .9],...
    'Visible',          'off',...
    'ColumnEditable',   false,...
    'ColumnWidth',      {65 65 65 65 65 65 65 65 65},...
    'ColumnName',       {'<html>K<sub>50</sub><span>&#47;</span>K<sub>0</sub></html>' ...
                         '<html><center />&alpha<br /> [Gy<sup>-1</sup>]</html>' ...
                         '<html><center />&beta<br />[Gy<sup>-2</sup>]</html>' ...
                         '<html>&alpha<span>&#47;</span>&beta<br />[Gy]</html>' ...
                         '<html><center>&gamma <br /> [day<sup>-1</sup>]</center></html>' ...
                         '<html><center>T<sub>d</sub><br />[day]</html>' ...
                         '<html><center /> &sigma<sub>k</sub> <span>&#47;</span>K<sub>0</sub></html>' ...
                         '<html>&delta</html>'...
                         '<html>&chi<sup>2</sup><span>&#47;</span>dof<br /></html>'},...
    'RowName',           {'Results' 'Lower uncty.' 'Upper uncty.'},...
    'Userdata',          FitData,...
    'Tooltip',           {'Results of the fited parameters with lower and upper bound uncertainties.'});

    
%----------% FUNCTIONS %----------%
function PltData(~,~)
    
    data = get(handles.uitable,'Userdata');
    tmp = get(handles.uitable, 'Rowname');  % Get data stored in the Data Details table as "Userdata"
    Labels = data(:,3);                     % Labels for each data set 
    select = cell2mat(data(:,1));           % Selection state of the data

    cla(handles.axes_Time, 'reset')         %reset plot
    axes(handles.axes_Time);                %Select "Time" axes  

    for k = 1:numel(tmp)
        if select(k) == 1 
            InputData = load(strcat('./',string(tmp(k)),'.m'));
            Time = InputData(:, 1);
            SR = InputData(:, 2);

            if numel(InputData(1,:))==2
                errhigh = zeros(numel(Time),1);
                errlow = zeros(numel(Time),1);
            elseif numel(InputData(1,:))==4
                errhigh = InputData(:,3);
                errlow = InputData(:,4);
            end
            hold on
            colors = {'m', 'b', 'k', 'r', 'g', 'c', 'y', '#FF7F50', '#9FE2BF', '#CCCCFF', '#CCD1D1', '#FFF978'};
            markers = {'o','+','*','x','s','d','^','v','>','<','p','h'};
            plot(Time, SR, ...
                'LineStyle',    'none', ...
                'Marker',       markers{mod(k,12)},...
                'LineWidth',    2, ...
                'Color',        colors{mod(k,12)}, ...
                'MarkerSize',   6,...
                'DisplayName',  string(Labels(k)))
            errorbar(Time,SR,errlow,errhigh, ...
                     'Color',            colors{mod(k,12)}, ...
                     'LineStyle',        'none', ...
                     'HandleVisibility', 'off');
            legend('Location',  'northeast')
            legend('boxoff')
            xlabel('Time (months)')
            ylabel('SR (%)')
            axis([0 inf 0 100])
            title('Clinical Data') 
        end
    end
end


function SavePlot (~,~)
    choice = menu('Axes to save:','SR vs Time','SR vs BED', 'Both');
    FileName = inputdlg('Enter file name and extension (.png, .pdf, .jpg, .fig, .m, .jpeg, .svg):');
    
    if choice == 1      % If axes time selected
        fignew = figure('Visible','off','WindowState', 'maximized');    % Invisible figure
        newAxes = copyobj(handles.axes_Time,fignew);                    % Copy the appropriate axes
        set(newAxes,'Position', [.1 .1 .9 .9], 'Units', 'normalized');  % The original position is copied too, so adjust it.
    elseif choice == 2  % If axes BED selected
        fignew = figure('Visible','off','WindowState', 'maximized');    
        newAxes = copyobj(handles.axes_BED,fignew);                     
        set(newAxes,'Position', [.1 .1 .9 .9], 'Units', 'normalized'); 
    elseif choice == 3  % If both is selected
        fignew = figure('Visible', 'off', 'WindowState','maximized');
        newAxesTime = copyobj(handles.axes_Time, fignew);
        newAxesBED = copyobj(handles.axes_BED, fignew);
        set(newAxesTime);
        set(newAxesBED);
    end
    set(fignew,'CreateFcn','set(gcbf,''Visible'',''on'')');             % Make it visible upon loading
    saveas(fignew,string(FileName));
    delete(fignew);
end

%------------------------------------------------
% "CLEAR AXES" FUNCTION
%------------------------------------------------
function ClearAxes(~,~)

    cla(handles.axes_Time, 'reset')                 % Clear axes_Time
    axes(handles.axes_Time);                        % Selects it again
    xlabel('Time (months)')                         % Set labels
    ylabel('SR (%)')
    axis([0 inf 0 100])                             % Axis limits [x_min x_max y_min y_max] inf means it fits to the content
    title(' ')                                      % No title when cleared
    hold on;
    enableDefaultInteractivity(handles.axes_Time)   % Enables intereactivity+

    cla(handles.axes_BED, 'reset')                  % Clear axes_BED
    axes(handles.axes_BED);
    xlabel('BED (Gy)')
    ylabel('SR (%)')
    axis([0 inf 0 100])
    title(' ') 
    hold on;
    enableDefaultInteractivity(handles.axes_BED) 

end

%----------                                                     ----------%


end %main